// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comms_ariel.proto

#include "comms_ariel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_comms_5fariel_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_comms_5fariel_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CommonTelemetry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_comms_5fariel_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DroneTelemetry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_comms_5fariel_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Mission;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_comms_5fariel_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_USVTelemetry;
}  // namespace protobuf_comms_5fariel_2eproto
namespace comms_ariel {
class CommonTelemetryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonTelemetry>
      _instance;
} _CommonTelemetry_default_instance_;
class USVTelemetryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<USVTelemetry>
      _instance;
} _USVTelemetry_default_instance_;
class DroneTelemetryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DroneTelemetry>
      _instance;
} _DroneTelemetry_default_instance_;
class MissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mission>
      _instance;
} _Mission_default_instance_;
class USVToDroneMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<USVToDroneMessage>
      _instance;
} _USVToDroneMessage_default_instance_;
class DroneToUSVMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DroneToUSVMessage>
      _instance;
} _DroneToUSVMessage_default_instance_;
}  // namespace comms_ariel
namespace protobuf_comms_5fariel_2eproto {
static void InitDefaultsCommonTelemetry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::comms_ariel::_CommonTelemetry_default_instance_;
    new (ptr) ::comms_ariel::CommonTelemetry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::comms_ariel::CommonTelemetry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommonTelemetry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommonTelemetry}, {}};

static void InitDefaultsUSVTelemetry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::comms_ariel::_USVTelemetry_default_instance_;
    new (ptr) ::comms_ariel::USVTelemetry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::comms_ariel::USVTelemetry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_USVTelemetry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUSVTelemetry}, {}};

static void InitDefaultsDroneTelemetry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::comms_ariel::_DroneTelemetry_default_instance_;
    new (ptr) ::comms_ariel::DroneTelemetry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::comms_ariel::DroneTelemetry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DroneTelemetry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDroneTelemetry}, {}};

static void InitDefaultsMission() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::comms_ariel::_Mission_default_instance_;
    new (ptr) ::comms_ariel::Mission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::comms_ariel::Mission::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mission =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMission}, {}};

static void InitDefaultsUSVToDroneMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::comms_ariel::_USVToDroneMessage_default_instance_;
    new (ptr) ::comms_ariel::USVToDroneMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::comms_ariel::USVToDroneMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_USVToDroneMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUSVToDroneMessage}, {
      &protobuf_comms_5fariel_2eproto::scc_info_CommonTelemetry.base,
      &protobuf_comms_5fariel_2eproto::scc_info_USVTelemetry.base,
      &protobuf_comms_5fariel_2eproto::scc_info_Mission.base,}};

static void InitDefaultsDroneToUSVMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::comms_ariel::_DroneToUSVMessage_default_instance_;
    new (ptr) ::comms_ariel::DroneToUSVMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::comms_ariel::DroneToUSVMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DroneToUSVMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDroneToUSVMessage}, {
      &protobuf_comms_5fariel_2eproto::scc_info_CommonTelemetry.base,
      &protobuf_comms_5fariel_2eproto::scc_info_DroneTelemetry.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CommonTelemetry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_USVTelemetry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DroneTelemetry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mission.base);
  ::google::protobuf::internal::InitSCC(&scc_info_USVToDroneMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DroneToUSVMessage.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::CommonTelemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::CommonTelemetry, time_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::CommonTelemetry, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::USVTelemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::USVTelemetry, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::USVTelemetry, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::USVTelemetry, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::USVTelemetry, velocity_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::USVTelemetry, velocity_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::USVTelemetry, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::DroneTelemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::DroneTelemetry, loaded_mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::DroneTelemetry, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::DroneTelemetry, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::DroneTelemetry, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::DroneTelemetry, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::Mission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::Mission, mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::Mission, waypoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::Mission, usv_reference_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::Mission, usv_waypoints_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::USVToDroneMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::USVToDroneMessage, common_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::USVToDroneMessage, telemetry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::USVToDroneMessage, mission_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::DroneToUSVMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::DroneToUSVMessage, common_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::comms_ariel::DroneToUSVMessage, telemetry_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::comms_ariel::CommonTelemetry)},
  { 7, -1, sizeof(::comms_ariel::USVTelemetry)},
  { 18, -1, sizeof(::comms_ariel::DroneTelemetry)},
  { 28, -1, sizeof(::comms_ariel::Mission)},
  { 37, -1, sizeof(::comms_ariel::USVToDroneMessage)},
  { 45, -1, sizeof(::comms_ariel::DroneToUSVMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::comms_ariel::_CommonTelemetry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::comms_ariel::_USVTelemetry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::comms_ariel::_DroneTelemetry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::comms_ariel::_Mission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::comms_ariel::_USVToDroneMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::comms_ariel::_DroneToUSVMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "comms_ariel.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021comms_ariel.proto\022\013comms_ariel\".\n\017Comm"
      "onTelemetry\022\017\n\007time_us\030\001 \001(\004\022\n\n\002id\030\002 \001(\r"
      "\"\330\001\n\014USVTelemetry\022\020\n\010latitude\030\002 \001(\001\022\021\n\tl"
      "ongitude\030\003 \001(\001\022\023\n\013orientation\030\004 \003(\001\022\022\n\nv"
      "elocity_n\030\005 \001(\002\022\022\n\nvelocity_w\030\006 \001(\002\022/\n\005s"
      "tate\030\010 \001(\0162 .comms_ariel.USVTelemetry.St"
      "ates\"5\n\006States\022\013\n\007TRANSIT\020\000\022\016\n\nTAKEOFF_O"
      "K\020\001\022\016\n\nLANDING_OK\020\002\"\264\001\n\016DroneTelemetry\022\031"
      "\n\021loaded_mission_id\030\001 \001(\004\022\020\n\010latitude\030\002 "
      "\001(\001\022\021\n\tlongitude\030\003 \001(\001\022\020\n\010altitude\030\004 \001(\002"
      "\0221\n\005state\030\010 \001(\0162\".comms_ariel.DroneTelem"
      "etry.States\"\035\n\006States\022\023\n\017WAITING_LANDING"
      "\020\000\"c\n\007Mission\022\022\n\nmission_id\030\001 \001(\004\022\021\n\tway"
      "points\030\002 \003(\001\022\032\n\022usv_reference_time\030\003 \001(\004"
      "\022\025\n\rusv_waypoints\030\004 \003(\001\"\226\001\n\021USVToDroneMe"
      "ssage\022,\n\006common\030\001 \001(\0132\034.comms_ariel.Comm"
      "onTelemetry\022,\n\ttelemetry\030\002 \001(\0132\031.comms_a"
      "riel.USVTelemetry\022%\n\007mission\030\003 \001(\0132\024.com"
      "ms_ariel.Mission\"q\n\021DroneToUSVMessage\022,\n"
      "\006common\030\001 \001(\0132\034.comms_ariel.CommonTeleme"
      "try\022.\n\ttelemetry\030\002 \001(\0132\033.comms_ariel.Dro"
      "neTelemetryb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 859);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comms_ariel.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_comms_5fariel_2eproto
namespace comms_ariel {
const ::google::protobuf::EnumDescriptor* USVTelemetry_States_descriptor() {
  protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_comms_5fariel_2eproto::file_level_enum_descriptors[0];
}
bool USVTelemetry_States_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const USVTelemetry_States USVTelemetry::TRANSIT;
const USVTelemetry_States USVTelemetry::TAKEOFF_OK;
const USVTelemetry_States USVTelemetry::LANDING_OK;
const USVTelemetry_States USVTelemetry::States_MIN;
const USVTelemetry_States USVTelemetry::States_MAX;
const int USVTelemetry::States_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DroneTelemetry_States_descriptor() {
  protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_comms_5fariel_2eproto::file_level_enum_descriptors[1];
}
bool DroneTelemetry_States_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DroneTelemetry_States DroneTelemetry::WAITING_LANDING;
const DroneTelemetry_States DroneTelemetry::States_MIN;
const DroneTelemetry_States DroneTelemetry::States_MAX;
const int DroneTelemetry::States_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CommonTelemetry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonTelemetry::kTimeUsFieldNumber;
const int CommonTelemetry::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonTelemetry::CommonTelemetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_comms_5fariel_2eproto::scc_info_CommonTelemetry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_ariel.CommonTelemetry)
}
CommonTelemetry::CommonTelemetry(const CommonTelemetry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_us_, &from.time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&time_us_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:comms_ariel.CommonTelemetry)
}

void CommonTelemetry::SharedCtor() {
  ::memset(&time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&time_us_)) + sizeof(id_));
}

CommonTelemetry::~CommonTelemetry() {
  // @@protoc_insertion_point(destructor:comms_ariel.CommonTelemetry)
  SharedDtor();
}

void CommonTelemetry::SharedDtor() {
}

void CommonTelemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommonTelemetry::descriptor() {
  ::protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comms_5fariel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonTelemetry& CommonTelemetry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_comms_5fariel_2eproto::scc_info_CommonTelemetry.base);
  return *internal_default_instance();
}


void CommonTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.CommonTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&time_us_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

bool CommonTelemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_ariel.CommonTelemetry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time_us = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_ariel.CommonTelemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_ariel.CommonTelemetry)
  return false;
#undef DO_
}

void CommonTelemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_ariel.CommonTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_us = 1;
  if (this->time_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_us(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:comms_ariel.CommonTelemetry)
}

::google::protobuf::uint8* CommonTelemetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.CommonTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_us = 1;
  if (this->time_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_us(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.CommonTelemetry)
  return target;
}

size_t CommonTelemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.CommonTelemetry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 time_us = 1;
  if (this->time_us() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_us());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonTelemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.CommonTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonTelemetry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonTelemetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.CommonTelemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.CommonTelemetry)
    MergeFrom(*source);
  }
}

void CommonTelemetry::MergeFrom(const CommonTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.CommonTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_us() != 0) {
    set_time_us(from.time_us());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void CommonTelemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.CommonTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonTelemetry::CopyFrom(const CommonTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.CommonTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonTelemetry::IsInitialized() const {
  return true;
}

void CommonTelemetry::Swap(CommonTelemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonTelemetry::InternalSwap(CommonTelemetry* other) {
  using std::swap;
  swap(time_us_, other->time_us_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommonTelemetry::GetMetadata() const {
  protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comms_5fariel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void USVTelemetry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int USVTelemetry::kLatitudeFieldNumber;
const int USVTelemetry::kLongitudeFieldNumber;
const int USVTelemetry::kOrientationFieldNumber;
const int USVTelemetry::kVelocityNFieldNumber;
const int USVTelemetry::kVelocityWFieldNumber;
const int USVTelemetry::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

USVTelemetry::USVTelemetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_comms_5fariel_2eproto::scc_info_USVTelemetry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_ariel.USVTelemetry)
}
USVTelemetry::USVTelemetry(const USVTelemetry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      orientation_(from.orientation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:comms_ariel.USVTelemetry)
}

void USVTelemetry::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(state_));
}

USVTelemetry::~USVTelemetry() {
  // @@protoc_insertion_point(destructor:comms_ariel.USVTelemetry)
  SharedDtor();
}

void USVTelemetry::SharedDtor() {
}

void USVTelemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* USVTelemetry::descriptor() {
  ::protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comms_5fariel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const USVTelemetry& USVTelemetry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_comms_5fariel_2eproto::scc_info_USVTelemetry.base);
  return *internal_default_instance();
}


void USVTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.USVTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orientation_.Clear();
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool USVTelemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_ariel.USVTelemetry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double orientation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_orientation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_orientation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity_n = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity_w = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .comms_ariel.USVTelemetry.States state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::comms_ariel::USVTelemetry_States >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_ariel.USVTelemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_ariel.USVTelemetry)
  return false;
#undef DO_
}

void USVTelemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_ariel.USVTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // double longitude = 3;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // repeated double orientation = 4;
  if (this->orientation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _orientation_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->orientation().data(), this->orientation_size(), output);
  }

  // float velocity_n = 5;
  if (this->velocity_n() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->velocity_n(), output);
  }

  // float velocity_w = 6;
  if (this->velocity_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->velocity_w(), output);
  }

  // .comms_ariel.USVTelemetry.States state = 8;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:comms_ariel.USVTelemetry)
}

::google::protobuf::uint8* USVTelemetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.USVTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // double longitude = 3;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // repeated double orientation = 4;
  if (this->orientation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _orientation_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->orientation_, target);
  }

  // float velocity_n = 5;
  if (this->velocity_n() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->velocity_n(), target);
  }

  // float velocity_w = 6;
  if (this->velocity_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->velocity_w(), target);
  }

  // .comms_ariel.USVTelemetry.States state = 8;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.USVTelemetry)
  return target;
}

size_t USVTelemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.USVTelemetry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double orientation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->orientation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _orientation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 3;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // float velocity_n = 5;
  if (this->velocity_n() != 0) {
    total_size += 1 + 4;
  }

  // float velocity_w = 6;
  if (this->velocity_w() != 0) {
    total_size += 1 + 4;
  }

  // .comms_ariel.USVTelemetry.States state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USVTelemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.USVTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const USVTelemetry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const USVTelemetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.USVTelemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.USVTelemetry)
    MergeFrom(*source);
  }
}

void USVTelemetry::MergeFrom(const USVTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.USVTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orientation_.MergeFrom(from.orientation_);
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.velocity_n() != 0) {
    set_velocity_n(from.velocity_n());
  }
  if (from.velocity_w() != 0) {
    set_velocity_w(from.velocity_w());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void USVTelemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.USVTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USVTelemetry::CopyFrom(const USVTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.USVTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USVTelemetry::IsInitialized() const {
  return true;
}

void USVTelemetry::Swap(USVTelemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void USVTelemetry::InternalSwap(USVTelemetry* other) {
  using std::swap;
  orientation_.InternalSwap(&other->orientation_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(velocity_n_, other->velocity_n_);
  swap(velocity_w_, other->velocity_w_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata USVTelemetry::GetMetadata() const {
  protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comms_5fariel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DroneTelemetry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DroneTelemetry::kLoadedMissionIdFieldNumber;
const int DroneTelemetry::kLatitudeFieldNumber;
const int DroneTelemetry::kLongitudeFieldNumber;
const int DroneTelemetry::kAltitudeFieldNumber;
const int DroneTelemetry::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DroneTelemetry::DroneTelemetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_comms_5fariel_2eproto::scc_info_DroneTelemetry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_ariel.DroneTelemetry)
}
DroneTelemetry::DroneTelemetry(const DroneTelemetry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&loaded_mission_id_, &from.loaded_mission_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&loaded_mission_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:comms_ariel.DroneTelemetry)
}

void DroneTelemetry::SharedCtor() {
  ::memset(&loaded_mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&loaded_mission_id_)) + sizeof(state_));
}

DroneTelemetry::~DroneTelemetry() {
  // @@protoc_insertion_point(destructor:comms_ariel.DroneTelemetry)
  SharedDtor();
}

void DroneTelemetry::SharedDtor() {
}

void DroneTelemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DroneTelemetry::descriptor() {
  ::protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comms_5fariel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DroneTelemetry& DroneTelemetry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_comms_5fariel_2eproto::scc_info_DroneTelemetry.base);
  return *internal_default_instance();
}


void DroneTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.DroneTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&loaded_mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&loaded_mission_id_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool DroneTelemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_ariel.DroneTelemetry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 loaded_mission_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &loaded_mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .comms_ariel.DroneTelemetry.States state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::comms_ariel::DroneTelemetry_States >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_ariel.DroneTelemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_ariel.DroneTelemetry)
  return false;
#undef DO_
}

void DroneTelemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_ariel.DroneTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 loaded_mission_id = 1;
  if (this->loaded_mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->loaded_mission_id(), output);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // double longitude = 3;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->altitude(), output);
  }

  // .comms_ariel.DroneTelemetry.States state = 8;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:comms_ariel.DroneTelemetry)
}

::google::protobuf::uint8* DroneTelemetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.DroneTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 loaded_mission_id = 1;
  if (this->loaded_mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->loaded_mission_id(), target);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // double longitude = 3;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->altitude(), target);
  }

  // .comms_ariel.DroneTelemetry.States state = 8;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.DroneTelemetry)
  return target;
}

size_t DroneTelemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.DroneTelemetry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 loaded_mission_id = 1;
  if (this->loaded_mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->loaded_mission_id());
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 3;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  // .comms_ariel.DroneTelemetry.States state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DroneTelemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.DroneTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const DroneTelemetry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DroneTelemetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.DroneTelemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.DroneTelemetry)
    MergeFrom(*source);
  }
}

void DroneTelemetry::MergeFrom(const DroneTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.DroneTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loaded_mission_id() != 0) {
    set_loaded_mission_id(from.loaded_mission_id());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void DroneTelemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.DroneTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneTelemetry::CopyFrom(const DroneTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.DroneTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneTelemetry::IsInitialized() const {
  return true;
}

void DroneTelemetry::Swap(DroneTelemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DroneTelemetry::InternalSwap(DroneTelemetry* other) {
  using std::swap;
  swap(loaded_mission_id_, other->loaded_mission_id_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_, other->altitude_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DroneTelemetry::GetMetadata() const {
  protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comms_5fariel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mission::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mission::kMissionIdFieldNumber;
const int Mission::kWaypointsFieldNumber;
const int Mission::kUsvReferenceTimeFieldNumber;
const int Mission::kUsvWaypointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mission::Mission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_comms_5fariel_2eproto::scc_info_Mission.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_ariel.Mission)
}
Mission::Mission(const Mission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      waypoints_(from.waypoints_),
      usv_waypoints_(from.usv_waypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mission_id_, &from.mission_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&usv_reference_time_) -
    reinterpret_cast<char*>(&mission_id_)) + sizeof(usv_reference_time_));
  // @@protoc_insertion_point(copy_constructor:comms_ariel.Mission)
}

void Mission::SharedCtor() {
  ::memset(&mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usv_reference_time_) -
      reinterpret_cast<char*>(&mission_id_)) + sizeof(usv_reference_time_));
}

Mission::~Mission() {
  // @@protoc_insertion_point(destructor:comms_ariel.Mission)
  SharedDtor();
}

void Mission::SharedDtor() {
}

void Mission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Mission::descriptor() {
  ::protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comms_5fariel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mission& Mission::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_comms_5fariel_2eproto::scc_info_Mission.base);
  return *internal_default_instance();
}


void Mission::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.Mission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoints_.Clear();
  usv_waypoints_.Clear();
  ::memset(&mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usv_reference_time_) -
      reinterpret_cast<char*>(&mission_id_)) + sizeof(usv_reference_time_));
  _internal_metadata_.Clear();
}

bool Mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_ariel.Mission)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 mission_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double waypoints = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_waypoints())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_waypoints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 usv_reference_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usv_reference_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double usv_waypoints = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_usv_waypoints())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_usv_waypoints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_ariel.Mission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_ariel.Mission)
  return false;
#undef DO_
}

void Mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_ariel.Mission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mission_id = 1;
  if (this->mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mission_id(), output);
  }

  // repeated double waypoints = 2;
  if (this->waypoints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _waypoints_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->waypoints().data(), this->waypoints_size(), output);
  }

  // uint64 usv_reference_time = 3;
  if (this->usv_reference_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->usv_reference_time(), output);
  }

  // repeated double usv_waypoints = 4;
  if (this->usv_waypoints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _usv_waypoints_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->usv_waypoints().data(), this->usv_waypoints_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:comms_ariel.Mission)
}

::google::protobuf::uint8* Mission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.Mission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mission_id = 1;
  if (this->mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mission_id(), target);
  }

  // repeated double waypoints = 2;
  if (this->waypoints_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _waypoints_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->waypoints_, target);
  }

  // uint64 usv_reference_time = 3;
  if (this->usv_reference_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->usv_reference_time(), target);
  }

  // repeated double usv_waypoints = 4;
  if (this->usv_waypoints_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _usv_waypoints_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->usv_waypoints_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.Mission)
  return target;
}

size_t Mission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.Mission)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double waypoints = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->waypoints_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _waypoints_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double usv_waypoints = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->usv_waypoints_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _usv_waypoints_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 mission_id = 1;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mission_id());
  }

  // uint64 usv_reference_time = 3;
  if (this->usv_reference_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->usv_reference_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.Mission)
  GOOGLE_DCHECK_NE(&from, this);
  const Mission* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.Mission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.Mission)
    MergeFrom(*source);
  }
}

void Mission::MergeFrom(const Mission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.Mission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoints_.MergeFrom(from.waypoints_);
  usv_waypoints_.MergeFrom(from.usv_waypoints_);
  if (from.mission_id() != 0) {
    set_mission_id(from.mission_id());
  }
  if (from.usv_reference_time() != 0) {
    set_usv_reference_time(from.usv_reference_time());
  }
}

void Mission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.Mission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mission::CopyFrom(const Mission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.Mission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission::IsInitialized() const {
  return true;
}

void Mission::Swap(Mission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mission::InternalSwap(Mission* other) {
  using std::swap;
  waypoints_.InternalSwap(&other->waypoints_);
  usv_waypoints_.InternalSwap(&other->usv_waypoints_);
  swap(mission_id_, other->mission_id_);
  swap(usv_reference_time_, other->usv_reference_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mission::GetMetadata() const {
  protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comms_5fariel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void USVToDroneMessage::InitAsDefaultInstance() {
  ::comms_ariel::_USVToDroneMessage_default_instance_._instance.get_mutable()->common_ = const_cast< ::comms_ariel::CommonTelemetry*>(
      ::comms_ariel::CommonTelemetry::internal_default_instance());
  ::comms_ariel::_USVToDroneMessage_default_instance_._instance.get_mutable()->telemetry_ = const_cast< ::comms_ariel::USVTelemetry*>(
      ::comms_ariel::USVTelemetry::internal_default_instance());
  ::comms_ariel::_USVToDroneMessage_default_instance_._instance.get_mutable()->mission_ = const_cast< ::comms_ariel::Mission*>(
      ::comms_ariel::Mission::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int USVToDroneMessage::kCommonFieldNumber;
const int USVToDroneMessage::kTelemetryFieldNumber;
const int USVToDroneMessage::kMissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

USVToDroneMessage::USVToDroneMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_comms_5fariel_2eproto::scc_info_USVToDroneMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_ariel.USVToDroneMessage)
}
USVToDroneMessage::USVToDroneMessage(const USVToDroneMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common()) {
    common_ = new ::comms_ariel::CommonTelemetry(*from.common_);
  } else {
    common_ = NULL;
  }
  if (from.has_telemetry()) {
    telemetry_ = new ::comms_ariel::USVTelemetry(*from.telemetry_);
  } else {
    telemetry_ = NULL;
  }
  if (from.has_mission()) {
    mission_ = new ::comms_ariel::Mission(*from.mission_);
  } else {
    mission_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:comms_ariel.USVToDroneMessage)
}

void USVToDroneMessage::SharedCtor() {
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_) -
      reinterpret_cast<char*>(&common_)) + sizeof(mission_));
}

USVToDroneMessage::~USVToDroneMessage() {
  // @@protoc_insertion_point(destructor:comms_ariel.USVToDroneMessage)
  SharedDtor();
}

void USVToDroneMessage::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete telemetry_;
  if (this != internal_default_instance()) delete mission_;
}

void USVToDroneMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* USVToDroneMessage::descriptor() {
  ::protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comms_5fariel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const USVToDroneMessage& USVToDroneMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_comms_5fariel_2eproto::scc_info_USVToDroneMessage.base);
  return *internal_default_instance();
}


void USVToDroneMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.USVToDroneMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && common_ != NULL) {
    delete common_;
  }
  common_ = NULL;
  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) {
    delete telemetry_;
  }
  telemetry_ = NULL;
  if (GetArenaNoVirtual() == NULL && mission_ != NULL) {
    delete mission_;
  }
  mission_ = NULL;
  _internal_metadata_.Clear();
}

bool USVToDroneMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_ariel.USVToDroneMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .comms_ariel.CommonTelemetry common = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .comms_ariel.USVTelemetry telemetry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_telemetry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .comms_ariel.Mission mission = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mission()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_ariel.USVToDroneMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_ariel.USVToDroneMessage)
  return false;
#undef DO_
}

void USVToDroneMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_ariel.USVToDroneMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_common(), output);
  }

  // .comms_ariel.USVTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_telemetry(), output);
  }

  // .comms_ariel.Mission mission = 3;
  if (this->has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_mission(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:comms_ariel.USVToDroneMessage)
}

::google::protobuf::uint8* USVToDroneMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.USVToDroneMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_common(), deterministic, target);
  }

  // .comms_ariel.USVTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_telemetry(), deterministic, target);
  }

  // .comms_ariel.Mission mission = 3;
  if (this->has_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_mission(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.USVToDroneMessage)
  return target;
}

size_t USVToDroneMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.USVToDroneMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .comms_ariel.USVTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *telemetry_);
  }

  // .comms_ariel.Mission mission = 3;
  if (this->has_mission()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mission_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USVToDroneMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.USVToDroneMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const USVToDroneMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const USVToDroneMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.USVToDroneMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.USVToDroneMessage)
    MergeFrom(*source);
  }
}

void USVToDroneMessage::MergeFrom(const USVToDroneMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.USVToDroneMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    mutable_common()->::comms_ariel::CommonTelemetry::MergeFrom(from.common());
  }
  if (from.has_telemetry()) {
    mutable_telemetry()->::comms_ariel::USVTelemetry::MergeFrom(from.telemetry());
  }
  if (from.has_mission()) {
    mutable_mission()->::comms_ariel::Mission::MergeFrom(from.mission());
  }
}

void USVToDroneMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.USVToDroneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USVToDroneMessage::CopyFrom(const USVToDroneMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.USVToDroneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USVToDroneMessage::IsInitialized() const {
  return true;
}

void USVToDroneMessage::Swap(USVToDroneMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void USVToDroneMessage::InternalSwap(USVToDroneMessage* other) {
  using std::swap;
  swap(common_, other->common_);
  swap(telemetry_, other->telemetry_);
  swap(mission_, other->mission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata USVToDroneMessage::GetMetadata() const {
  protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comms_5fariel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DroneToUSVMessage::InitAsDefaultInstance() {
  ::comms_ariel::_DroneToUSVMessage_default_instance_._instance.get_mutable()->common_ = const_cast< ::comms_ariel::CommonTelemetry*>(
      ::comms_ariel::CommonTelemetry::internal_default_instance());
  ::comms_ariel::_DroneToUSVMessage_default_instance_._instance.get_mutable()->telemetry_ = const_cast< ::comms_ariel::DroneTelemetry*>(
      ::comms_ariel::DroneTelemetry::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DroneToUSVMessage::kCommonFieldNumber;
const int DroneToUSVMessage::kTelemetryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DroneToUSVMessage::DroneToUSVMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_comms_5fariel_2eproto::scc_info_DroneToUSVMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_ariel.DroneToUSVMessage)
}
DroneToUSVMessage::DroneToUSVMessage(const DroneToUSVMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common()) {
    common_ = new ::comms_ariel::CommonTelemetry(*from.common_);
  } else {
    common_ = NULL;
  }
  if (from.has_telemetry()) {
    telemetry_ = new ::comms_ariel::DroneTelemetry(*from.telemetry_);
  } else {
    telemetry_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:comms_ariel.DroneToUSVMessage)
}

void DroneToUSVMessage::SharedCtor() {
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&telemetry_) -
      reinterpret_cast<char*>(&common_)) + sizeof(telemetry_));
}

DroneToUSVMessage::~DroneToUSVMessage() {
  // @@protoc_insertion_point(destructor:comms_ariel.DroneToUSVMessage)
  SharedDtor();
}

void DroneToUSVMessage::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete telemetry_;
}

void DroneToUSVMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DroneToUSVMessage::descriptor() {
  ::protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comms_5fariel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DroneToUSVMessage& DroneToUSVMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_comms_5fariel_2eproto::scc_info_DroneToUSVMessage.base);
  return *internal_default_instance();
}


void DroneToUSVMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.DroneToUSVMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && common_ != NULL) {
    delete common_;
  }
  common_ = NULL;
  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) {
    delete telemetry_;
  }
  telemetry_ = NULL;
  _internal_metadata_.Clear();
}

bool DroneToUSVMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_ariel.DroneToUSVMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .comms_ariel.CommonTelemetry common = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .comms_ariel.DroneTelemetry telemetry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_telemetry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_ariel.DroneToUSVMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_ariel.DroneToUSVMessage)
  return false;
#undef DO_
}

void DroneToUSVMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_ariel.DroneToUSVMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_common(), output);
  }

  // .comms_ariel.DroneTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_telemetry(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:comms_ariel.DroneToUSVMessage)
}

::google::protobuf::uint8* DroneToUSVMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.DroneToUSVMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_common(), deterministic, target);
  }

  // .comms_ariel.DroneTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_telemetry(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.DroneToUSVMessage)
  return target;
}

size_t DroneToUSVMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.DroneToUSVMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .comms_ariel.DroneTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *telemetry_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DroneToUSVMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.DroneToUSVMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DroneToUSVMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DroneToUSVMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.DroneToUSVMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.DroneToUSVMessage)
    MergeFrom(*source);
  }
}

void DroneToUSVMessage::MergeFrom(const DroneToUSVMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.DroneToUSVMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    mutable_common()->::comms_ariel::CommonTelemetry::MergeFrom(from.common());
  }
  if (from.has_telemetry()) {
    mutable_telemetry()->::comms_ariel::DroneTelemetry::MergeFrom(from.telemetry());
  }
}

void DroneToUSVMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.DroneToUSVMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneToUSVMessage::CopyFrom(const DroneToUSVMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.DroneToUSVMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneToUSVMessage::IsInitialized() const {
  return true;
}

void DroneToUSVMessage::Swap(DroneToUSVMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DroneToUSVMessage::InternalSwap(DroneToUSVMessage* other) {
  using std::swap;
  swap(common_, other->common_);
  swap(telemetry_, other->telemetry_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DroneToUSVMessage::GetMetadata() const {
  protobuf_comms_5fariel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_comms_5fariel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace comms_ariel
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::comms_ariel::CommonTelemetry* Arena::CreateMaybeMessage< ::comms_ariel::CommonTelemetry >(Arena* arena) {
  return Arena::CreateInternal< ::comms_ariel::CommonTelemetry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::comms_ariel::USVTelemetry* Arena::CreateMaybeMessage< ::comms_ariel::USVTelemetry >(Arena* arena) {
  return Arena::CreateInternal< ::comms_ariel::USVTelemetry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::comms_ariel::DroneTelemetry* Arena::CreateMaybeMessage< ::comms_ariel::DroneTelemetry >(Arena* arena) {
  return Arena::CreateInternal< ::comms_ariel::DroneTelemetry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::comms_ariel::Mission* Arena::CreateMaybeMessage< ::comms_ariel::Mission >(Arena* arena) {
  return Arena::CreateInternal< ::comms_ariel::Mission >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::comms_ariel::USVToDroneMessage* Arena::CreateMaybeMessage< ::comms_ariel::USVToDroneMessage >(Arena* arena) {
  return Arena::CreateInternal< ::comms_ariel::USVToDroneMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::comms_ariel::DroneToUSVMessage* Arena::CreateMaybeMessage< ::comms_ariel::DroneToUSVMessage >(Arena* arena) {
  return Arena::CreateInternal< ::comms_ariel::DroneToUSVMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

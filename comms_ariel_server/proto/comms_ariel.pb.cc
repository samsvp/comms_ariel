// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comms_ariel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comms_ariel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comms_ariel {

namespace {

const ::google::protobuf::Descriptor* CommonTelemetry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonTelemetry_reflection_ = NULL;
const ::google::protobuf::Descriptor* USVTelemetry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  USVTelemetry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* USVTelemetry_States_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DroneTelemetry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DroneTelemetry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DroneTelemetry_States_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mission_reflection_ = NULL;
const ::google::protobuf::Descriptor* USVToDroneMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  USVToDroneMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DroneToUSVMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DroneToUSVMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto() {
  protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "src/comms_ariel/proto/comms_ariel.proto");
  GOOGLE_CHECK(file != NULL);
  CommonTelemetry_descriptor_ = file->message_type(0);
  static const int CommonTelemetry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTelemetry, time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTelemetry, id_),
  };
  CommonTelemetry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommonTelemetry_descriptor_,
      CommonTelemetry::default_instance_,
      CommonTelemetry_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommonTelemetry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTelemetry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTelemetry, _is_default_instance_));
  USVTelemetry_descriptor_ = file->message_type(1);
  static const int USVTelemetry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVTelemetry, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVTelemetry, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVTelemetry, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVTelemetry, velocity_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVTelemetry, velocity_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVTelemetry, state_),
  };
  USVTelemetry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      USVTelemetry_descriptor_,
      USVTelemetry::default_instance_,
      USVTelemetry_offsets_,
      -1,
      -1,
      -1,
      sizeof(USVTelemetry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVTelemetry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVTelemetry, _is_default_instance_));
  USVTelemetry_States_descriptor_ = USVTelemetry_descriptor_->enum_type(0);
  DroneTelemetry_descriptor_ = file->message_type(2);
  static const int DroneTelemetry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneTelemetry, loaded_mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneTelemetry, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneTelemetry, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneTelemetry, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneTelemetry, state_),
  };
  DroneTelemetry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DroneTelemetry_descriptor_,
      DroneTelemetry::default_instance_,
      DroneTelemetry_offsets_,
      -1,
      -1,
      -1,
      sizeof(DroneTelemetry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneTelemetry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneTelemetry, _is_default_instance_));
  DroneTelemetry_States_descriptor_ = DroneTelemetry_descriptor_->enum_type(0);
  Mission_descriptor_ = file->message_type(3);
  static const int Mission_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, waypoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, usv_reference_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, usv_waypoints_),
  };
  Mission_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mission_descriptor_,
      Mission::default_instance_,
      Mission_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mission),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _is_default_instance_));
  USVToDroneMessage_descriptor_ = file->message_type(4);
  static const int USVToDroneMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVToDroneMessage, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVToDroneMessage, telemetry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVToDroneMessage, mission_),
  };
  USVToDroneMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      USVToDroneMessage_descriptor_,
      USVToDroneMessage::default_instance_,
      USVToDroneMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(USVToDroneMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVToDroneMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USVToDroneMessage, _is_default_instance_));
  DroneToUSVMessage_descriptor_ = file->message_type(5);
  static const int DroneToUSVMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneToUSVMessage, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneToUSVMessage, telemetry_),
  };
  DroneToUSVMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DroneToUSVMessage_descriptor_,
      DroneToUSVMessage::default_instance_,
      DroneToUSVMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(DroneToUSVMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneToUSVMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneToUSVMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommonTelemetry_descriptor_, &CommonTelemetry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      USVTelemetry_descriptor_, &USVTelemetry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DroneTelemetry_descriptor_, &DroneTelemetry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mission_descriptor_, &Mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      USVToDroneMessage_descriptor_, &USVToDroneMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DroneToUSVMessage_descriptor_, &DroneToUSVMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto() {
  delete CommonTelemetry::default_instance_;
  delete CommonTelemetry_reflection_;
  delete USVTelemetry::default_instance_;
  delete USVTelemetry_reflection_;
  delete DroneTelemetry::default_instance_;
  delete DroneTelemetry_reflection_;
  delete Mission::default_instance_;
  delete Mission_reflection_;
  delete USVToDroneMessage::default_instance_;
  delete USVToDroneMessage_reflection_;
  delete DroneToUSVMessage::default_instance_;
  delete DroneToUSVMessage_reflection_;
}

void protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'src/comms_ariel/proto/comms_ariel.prot"
    "o\022\013comms_ariel\".\n\017CommonTelemetry\022\017\n\007tim"
    "e_us\030\001 \001(\004\022\n\n\002id\030\002 \001(\r\"\330\001\n\014USVTelemetry\022"
    "\020\n\010latitude\030\002 \001(\001\022\021\n\tlongitude\030\003 \001(\001\022\023\n\013"
    "orientation\030\004 \003(\001\022\022\n\nvelocity_n\030\005 \001(\002\022\022\n"
    "\nvelocity_w\030\006 \001(\002\022/\n\005state\030\010 \001(\0162 .comms"
    "_ariel.USVTelemetry.States\"5\n\006States\022\013\n\007"
    "TRANSIT\020\000\022\016\n\nTAKEOFF_OK\020\001\022\016\n\nLANDING_OK\020"
    "\002\"\264\001\n\016DroneTelemetry\022\031\n\021loaded_mission_i"
    "d\030\001 \001(\004\022\020\n\010latitude\030\002 \001(\001\022\021\n\tlongitude\030\003"
    " \001(\001\022\020\n\010altitude\030\004 \001(\002\0221\n\005state\030\010 \001(\0162\"."
    "comms_ariel.DroneTelemetry.States\"\035\n\006Sta"
    "tes\022\023\n\017WAITING_LANDING\020\000\"c\n\007Mission\022\022\n\nm"
    "ission_id\030\001 \001(\004\022\021\n\twaypoints\030\002 \003(\001\022\032\n\022us"
    "v_reference_time\030\003 \001(\004\022\025\n\rusv_waypoints\030"
    "\004 \003(\001\"\226\001\n\021USVToDroneMessage\022,\n\006common\030\001 "
    "\001(\0132\034.comms_ariel.CommonTelemetry\022,\n\ttel"
    "emetry\030\002 \001(\0132\031.comms_ariel.USVTelemetry\022"
    "%\n\007mission\030\003 \001(\0132\024.comms_ariel.Mission\"q"
    "\n\021DroneToUSVMessage\022,\n\006common\030\001 \001(\0132\034.co"
    "mms_ariel.CommonTelemetry\022.\n\ttelemetry\030\002"
    " \001(\0132\033.comms_ariel.DroneTelemetryb\006proto"
    "3", 881);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/comms_ariel/proto/comms_ariel.proto", &protobuf_RegisterTypes);
  CommonTelemetry::default_instance_ = new CommonTelemetry();
  USVTelemetry::default_instance_ = new USVTelemetry();
  DroneTelemetry::default_instance_ = new DroneTelemetry();
  Mission::default_instance_ = new Mission();
  USVToDroneMessage::default_instance_ = new USVToDroneMessage();
  DroneToUSVMessage::default_instance_ = new DroneToUSVMessage();
  CommonTelemetry::default_instance_->InitAsDefaultInstance();
  USVTelemetry::default_instance_->InitAsDefaultInstance();
  DroneTelemetry::default_instance_->InitAsDefaultInstance();
  Mission::default_instance_->InitAsDefaultInstance();
  USVToDroneMessage::default_instance_->InitAsDefaultInstance();
  DroneToUSVMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto {
  StaticDescriptorInitializer_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto() {
    protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  }
} static_descriptor_initializer_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonTelemetry::kTimeUsFieldNumber;
const int CommonTelemetry::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonTelemetry::CommonTelemetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_ariel.CommonTelemetry)
}

void CommonTelemetry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommonTelemetry::CommonTelemetry(const CommonTelemetry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comms_ariel.CommonTelemetry)
}

void CommonTelemetry::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_us_ = GOOGLE_ULONGLONG(0);
  id_ = 0u;
}

CommonTelemetry::~CommonTelemetry() {
  // @@protoc_insertion_point(destructor:comms_ariel.CommonTelemetry)
  SharedDtor();
}

void CommonTelemetry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonTelemetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonTelemetry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTelemetry_descriptor_;
}

const CommonTelemetry& CommonTelemetry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  return *default_instance_;
}

CommonTelemetry* CommonTelemetry::default_instance_ = NULL;

CommonTelemetry* CommonTelemetry::New(::google::protobuf::Arena* arena) const {
  CommonTelemetry* n = new CommonTelemetry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.CommonTelemetry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CommonTelemetry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CommonTelemetry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_us_, id_);

#undef ZR_HELPER_
#undef ZR_

}

bool CommonTelemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_ariel.CommonTelemetry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time_us = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_us_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_ariel.CommonTelemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_ariel.CommonTelemetry)
  return false;
#undef DO_
}

void CommonTelemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_ariel.CommonTelemetry)
  // optional uint64 time_us = 1;
  if (this->time_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_us(), output);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:comms_ariel.CommonTelemetry)
}

::google::protobuf::uint8* CommonTelemetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.CommonTelemetry)
  // optional uint64 time_us = 1;
  if (this->time_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_us(), target);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.CommonTelemetry)
  return target;
}

int CommonTelemetry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.CommonTelemetry)
  int total_size = 0;

  // optional uint64 time_us = 1;
  if (this->time_us() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_us());
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonTelemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.CommonTelemetry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommonTelemetry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonTelemetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.CommonTelemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.CommonTelemetry)
    MergeFrom(*source);
  }
}

void CommonTelemetry::MergeFrom(const CommonTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.CommonTelemetry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.time_us() != 0) {
    set_time_us(from.time_us());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void CommonTelemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.CommonTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonTelemetry::CopyFrom(const CommonTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.CommonTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonTelemetry::IsInitialized() const {

  return true;
}

void CommonTelemetry::Swap(CommonTelemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonTelemetry::InternalSwap(CommonTelemetry* other) {
  std::swap(time_us_, other->time_us_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonTelemetry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonTelemetry_descriptor_;
  metadata.reflection = CommonTelemetry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonTelemetry

// optional uint64 time_us = 1;
void CommonTelemetry::clear_time_us() {
  time_us_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CommonTelemetry::time_us() const {
  // @@protoc_insertion_point(field_get:comms_ariel.CommonTelemetry.time_us)
  return time_us_;
}
 void CommonTelemetry::set_time_us(::google::protobuf::uint64 value) {
  
  time_us_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.CommonTelemetry.time_us)
}

// optional uint32 id = 2;
void CommonTelemetry::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 CommonTelemetry::id() const {
  // @@protoc_insertion_point(field_get:comms_ariel.CommonTelemetry.id)
  return id_;
}
 void CommonTelemetry::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.CommonTelemetry.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* USVTelemetry_States_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return USVTelemetry_States_descriptor_;
}
bool USVTelemetry_States_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const USVTelemetry_States USVTelemetry::TRANSIT;
const USVTelemetry_States USVTelemetry::TAKEOFF_OK;
const USVTelemetry_States USVTelemetry::LANDING_OK;
const USVTelemetry_States USVTelemetry::States_MIN;
const USVTelemetry_States USVTelemetry::States_MAX;
const int USVTelemetry::States_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int USVTelemetry::kLatitudeFieldNumber;
const int USVTelemetry::kLongitudeFieldNumber;
const int USVTelemetry::kOrientationFieldNumber;
const int USVTelemetry::kVelocityNFieldNumber;
const int USVTelemetry::kVelocityWFieldNumber;
const int USVTelemetry::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

USVTelemetry::USVTelemetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_ariel.USVTelemetry)
}

void USVTelemetry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

USVTelemetry::USVTelemetry(const USVTelemetry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comms_ariel.USVTelemetry)
}

void USVTelemetry::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  velocity_n_ = 0;
  velocity_w_ = 0;
  state_ = 0;
}

USVTelemetry::~USVTelemetry() {
  // @@protoc_insertion_point(destructor:comms_ariel.USVTelemetry)
  SharedDtor();
}

void USVTelemetry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void USVTelemetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* USVTelemetry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return USVTelemetry_descriptor_;
}

const USVTelemetry& USVTelemetry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  return *default_instance_;
}

USVTelemetry* USVTelemetry::default_instance_ = NULL;

USVTelemetry* USVTelemetry::New(::google::protobuf::Arena* arena) const {
  USVTelemetry* n = new USVTelemetry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void USVTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.USVTelemetry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(USVTelemetry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<USVTelemetry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(latitude_, longitude_);
  ZR_(velocity_n_, state_);

#undef ZR_HELPER_
#undef ZR_

  orientation_.Clear();
}

bool USVTelemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_ariel.USVTelemetry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 2;
      case 2: {
        if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_longitude;
        break;
      }

      // optional double longitude = 3;
      case 3: {
        if (tag == 25) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_orientation;
        break;
      }

      // repeated double orientation = 4;
      case 4: {
        if (tag == 34) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_orientation())));
        } else if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_orientation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_velocity_n;
        break;
      }

      // optional float velocity_n = 5;
      case 5: {
        if (tag == 45) {
         parse_velocity_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_n_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_velocity_w;
        break;
      }

      // optional float velocity_w = 6;
      case 6: {
        if (tag == 53) {
         parse_velocity_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_w_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional .comms_ariel.USVTelemetry.States state = 8;
      case 8: {
        if (tag == 64) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::comms_ariel::USVTelemetry_States >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_ariel.USVTelemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_ariel.USVTelemetry)
  return false;
#undef DO_
}

void USVTelemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_ariel.USVTelemetry)
  // optional double latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // optional double longitude = 3;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // repeated double orientation = 4;
  if (this->orientation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_orientation_cached_byte_size_);
  }
  for (int i = 0; i < this->orientation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->orientation(i), output);
  }

  // optional float velocity_n = 5;
  if (this->velocity_n() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->velocity_n(), output);
  }

  // optional float velocity_w = 6;
  if (this->velocity_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->velocity_w(), output);
  }

  // optional .comms_ariel.USVTelemetry.States state = 8;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:comms_ariel.USVTelemetry)
}

::google::protobuf::uint8* USVTelemetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.USVTelemetry)
  // optional double latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // optional double longitude = 3;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // repeated double orientation = 4;
  if (this->orientation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _orientation_cached_byte_size_, target);
  }
  for (int i = 0; i < this->orientation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->orientation(i), target);
  }

  // optional float velocity_n = 5;
  if (this->velocity_n() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->velocity_n(), target);
  }

  // optional float velocity_w = 6;
  if (this->velocity_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->velocity_w(), target);
  }

  // optional .comms_ariel.USVTelemetry.States state = 8;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.USVTelemetry)
  return target;
}

int USVTelemetry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.USVTelemetry)
  int total_size = 0;

  // optional double latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // optional double longitude = 3;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // optional float velocity_n = 5;
  if (this->velocity_n() != 0) {
    total_size += 1 + 4;
  }

  // optional float velocity_w = 6;
  if (this->velocity_w() != 0) {
    total_size += 1 + 4;
  }

  // optional .comms_ariel.USVTelemetry.States state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // repeated double orientation = 4;
  {
    int data_size = 0;
    data_size = 8 * this->orientation_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _orientation_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void USVTelemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.USVTelemetry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const USVTelemetry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const USVTelemetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.USVTelemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.USVTelemetry)
    MergeFrom(*source);
  }
}

void USVTelemetry::MergeFrom(const USVTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.USVTelemetry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  orientation_.MergeFrom(from.orientation_);
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.velocity_n() != 0) {
    set_velocity_n(from.velocity_n());
  }
  if (from.velocity_w() != 0) {
    set_velocity_w(from.velocity_w());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void USVTelemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.USVTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USVTelemetry::CopyFrom(const USVTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.USVTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USVTelemetry::IsInitialized() const {

  return true;
}

void USVTelemetry::Swap(USVTelemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void USVTelemetry::InternalSwap(USVTelemetry* other) {
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  orientation_.UnsafeArenaSwap(&other->orientation_);
  std::swap(velocity_n_, other->velocity_n_);
  std::swap(velocity_w_, other->velocity_w_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata USVTelemetry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = USVTelemetry_descriptor_;
  metadata.reflection = USVTelemetry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// USVTelemetry

// optional double latitude = 2;
void USVTelemetry::clear_latitude() {
  latitude_ = 0;
}
 double USVTelemetry::latitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.latitude)
  return latitude_;
}
 void USVTelemetry::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.latitude)
}

// optional double longitude = 3;
void USVTelemetry::clear_longitude() {
  longitude_ = 0;
}
 double USVTelemetry::longitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.longitude)
  return longitude_;
}
 void USVTelemetry::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.longitude)
}

// repeated double orientation = 4;
int USVTelemetry::orientation_size() const {
  return orientation_.size();
}
void USVTelemetry::clear_orientation() {
  orientation_.Clear();
}
 double USVTelemetry::orientation(int index) const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.orientation)
  return orientation_.Get(index);
}
 void USVTelemetry::set_orientation(int index, double value) {
  orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.orientation)
}
 void USVTelemetry::add_orientation(double value) {
  orientation_.Add(value);
  // @@protoc_insertion_point(field_add:comms_ariel.USVTelemetry.orientation)
}
 const ::google::protobuf::RepeatedField< double >&
USVTelemetry::orientation() const {
  // @@protoc_insertion_point(field_list:comms_ariel.USVTelemetry.orientation)
  return orientation_;
}
 ::google::protobuf::RepeatedField< double >*
USVTelemetry::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable_list:comms_ariel.USVTelemetry.orientation)
  return &orientation_;
}

// optional float velocity_n = 5;
void USVTelemetry::clear_velocity_n() {
  velocity_n_ = 0;
}
 float USVTelemetry::velocity_n() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.velocity_n)
  return velocity_n_;
}
 void USVTelemetry::set_velocity_n(float value) {
  
  velocity_n_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.velocity_n)
}

// optional float velocity_w = 6;
void USVTelemetry::clear_velocity_w() {
  velocity_w_ = 0;
}
 float USVTelemetry::velocity_w() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.velocity_w)
  return velocity_w_;
}
 void USVTelemetry::set_velocity_w(float value) {
  
  velocity_w_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.velocity_w)
}

// optional .comms_ariel.USVTelemetry.States state = 8;
void USVTelemetry::clear_state() {
  state_ = 0;
}
 ::comms_ariel::USVTelemetry_States USVTelemetry::state() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.state)
  return static_cast< ::comms_ariel::USVTelemetry_States >(state_);
}
 void USVTelemetry::set_state(::comms_ariel::USVTelemetry_States value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DroneTelemetry_States_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DroneTelemetry_States_descriptor_;
}
bool DroneTelemetry_States_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DroneTelemetry_States DroneTelemetry::WAITING_LANDING;
const DroneTelemetry_States DroneTelemetry::States_MIN;
const DroneTelemetry_States DroneTelemetry::States_MAX;
const int DroneTelemetry::States_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DroneTelemetry::kLoadedMissionIdFieldNumber;
const int DroneTelemetry::kLatitudeFieldNumber;
const int DroneTelemetry::kLongitudeFieldNumber;
const int DroneTelemetry::kAltitudeFieldNumber;
const int DroneTelemetry::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DroneTelemetry::DroneTelemetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_ariel.DroneTelemetry)
}

void DroneTelemetry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DroneTelemetry::DroneTelemetry(const DroneTelemetry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comms_ariel.DroneTelemetry)
}

void DroneTelemetry::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  loaded_mission_id_ = GOOGLE_ULONGLONG(0);
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  state_ = 0;
}

DroneTelemetry::~DroneTelemetry() {
  // @@protoc_insertion_point(destructor:comms_ariel.DroneTelemetry)
  SharedDtor();
}

void DroneTelemetry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DroneTelemetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DroneTelemetry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DroneTelemetry_descriptor_;
}

const DroneTelemetry& DroneTelemetry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  return *default_instance_;
}

DroneTelemetry* DroneTelemetry::default_instance_ = NULL;

DroneTelemetry* DroneTelemetry::New(::google::protobuf::Arena* arena) const {
  DroneTelemetry* n = new DroneTelemetry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DroneTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.DroneTelemetry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DroneTelemetry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DroneTelemetry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(loaded_mission_id_, state_);

#undef ZR_HELPER_
#undef ZR_

}

bool DroneTelemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_ariel.DroneTelemetry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 loaded_mission_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &loaded_mission_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // optional double latitude = 2;
      case 2: {
        if (tag == 17) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_longitude;
        break;
      }

      // optional double longitude = 3;
      case 3: {
        if (tag == 25) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_altitude;
        break;
      }

      // optional float altitude = 4;
      case 4: {
        if (tag == 37) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional .comms_ariel.DroneTelemetry.States state = 8;
      case 8: {
        if (tag == 64) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::comms_ariel::DroneTelemetry_States >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_ariel.DroneTelemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_ariel.DroneTelemetry)
  return false;
#undef DO_
}

void DroneTelemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_ariel.DroneTelemetry)
  // optional uint64 loaded_mission_id = 1;
  if (this->loaded_mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->loaded_mission_id(), output);
  }

  // optional double latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // optional double longitude = 3;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // optional float altitude = 4;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->altitude(), output);
  }

  // optional .comms_ariel.DroneTelemetry.States state = 8;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:comms_ariel.DroneTelemetry)
}

::google::protobuf::uint8* DroneTelemetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.DroneTelemetry)
  // optional uint64 loaded_mission_id = 1;
  if (this->loaded_mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->loaded_mission_id(), target);
  }

  // optional double latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // optional double longitude = 3;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // optional float altitude = 4;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->altitude(), target);
  }

  // optional .comms_ariel.DroneTelemetry.States state = 8;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.DroneTelemetry)
  return target;
}

int DroneTelemetry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.DroneTelemetry)
  int total_size = 0;

  // optional uint64 loaded_mission_id = 1;
  if (this->loaded_mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->loaded_mission_id());
  }

  // optional double latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // optional double longitude = 3;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // optional float altitude = 4;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  // optional .comms_ariel.DroneTelemetry.States state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DroneTelemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.DroneTelemetry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DroneTelemetry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DroneTelemetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.DroneTelemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.DroneTelemetry)
    MergeFrom(*source);
  }
}

void DroneTelemetry::MergeFrom(const DroneTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.DroneTelemetry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.loaded_mission_id() != 0) {
    set_loaded_mission_id(from.loaded_mission_id());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void DroneTelemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.DroneTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneTelemetry::CopyFrom(const DroneTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.DroneTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneTelemetry::IsInitialized() const {

  return true;
}

void DroneTelemetry::Swap(DroneTelemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DroneTelemetry::InternalSwap(DroneTelemetry* other) {
  std::swap(loaded_mission_id_, other->loaded_mission_id_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(altitude_, other->altitude_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DroneTelemetry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DroneTelemetry_descriptor_;
  metadata.reflection = DroneTelemetry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DroneTelemetry

// optional uint64 loaded_mission_id = 1;
void DroneTelemetry::clear_loaded_mission_id() {
  loaded_mission_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 DroneTelemetry::loaded_mission_id() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.loaded_mission_id)
  return loaded_mission_id_;
}
 void DroneTelemetry::set_loaded_mission_id(::google::protobuf::uint64 value) {
  
  loaded_mission_id_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.loaded_mission_id)
}

// optional double latitude = 2;
void DroneTelemetry::clear_latitude() {
  latitude_ = 0;
}
 double DroneTelemetry::latitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.latitude)
  return latitude_;
}
 void DroneTelemetry::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.latitude)
}

// optional double longitude = 3;
void DroneTelemetry::clear_longitude() {
  longitude_ = 0;
}
 double DroneTelemetry::longitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.longitude)
  return longitude_;
}
 void DroneTelemetry::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.longitude)
}

// optional float altitude = 4;
void DroneTelemetry::clear_altitude() {
  altitude_ = 0;
}
 float DroneTelemetry::altitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.altitude)
  return altitude_;
}
 void DroneTelemetry::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.altitude)
}

// optional .comms_ariel.DroneTelemetry.States state = 8;
void DroneTelemetry::clear_state() {
  state_ = 0;
}
 ::comms_ariel::DroneTelemetry_States DroneTelemetry::state() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.state)
  return static_cast< ::comms_ariel::DroneTelemetry_States >(state_);
}
 void DroneTelemetry::set_state(::comms_ariel::DroneTelemetry_States value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mission::kMissionIdFieldNumber;
const int Mission::kWaypointsFieldNumber;
const int Mission::kUsvReferenceTimeFieldNumber;
const int Mission::kUsvWaypointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mission::Mission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_ariel.Mission)
}

void Mission::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Mission::Mission(const Mission& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comms_ariel.Mission)
}

void Mission::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mission_id_ = GOOGLE_ULONGLONG(0);
  usv_reference_time_ = GOOGLE_ULONGLONG(0);
}

Mission::~Mission() {
  // @@protoc_insertion_point(destructor:comms_ariel.Mission)
  SharedDtor();
}

void Mission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mission_descriptor_;
}

const Mission& Mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  return *default_instance_;
}

Mission* Mission::default_instance_ = NULL;

Mission* Mission::New(::google::protobuf::Arena* arena) const {
  Mission* n = new Mission;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mission::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.Mission)
  mission_id_ = GOOGLE_ULONGLONG(0);
  usv_reference_time_ = GOOGLE_ULONGLONG(0);
  waypoints_.Clear();
  usv_waypoints_.Clear();
}

bool Mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_ariel.Mission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mission_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mission_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_waypoints;
        break;
      }

      // repeated double waypoints = 2;
      case 2: {
        if (tag == 18) {
         parse_waypoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_waypoints())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_waypoints())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_usv_reference_time;
        break;
      }

      // optional uint64 usv_reference_time = 3;
      case 3: {
        if (tag == 24) {
         parse_usv_reference_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usv_reference_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_usv_waypoints;
        break;
      }

      // repeated double usv_waypoints = 4;
      case 4: {
        if (tag == 34) {
         parse_usv_waypoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_usv_waypoints())));
        } else if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_usv_waypoints())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_ariel.Mission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_ariel.Mission)
  return false;
#undef DO_
}

void Mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_ariel.Mission)
  // optional uint64 mission_id = 1;
  if (this->mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mission_id(), output);
  }

  // repeated double waypoints = 2;
  if (this->waypoints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_waypoints_cached_byte_size_);
  }
  for (int i = 0; i < this->waypoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->waypoints(i), output);
  }

  // optional uint64 usv_reference_time = 3;
  if (this->usv_reference_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->usv_reference_time(), output);
  }

  // repeated double usv_waypoints = 4;
  if (this->usv_waypoints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_usv_waypoints_cached_byte_size_);
  }
  for (int i = 0; i < this->usv_waypoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->usv_waypoints(i), output);
  }

  // @@protoc_insertion_point(serialize_end:comms_ariel.Mission)
}

::google::protobuf::uint8* Mission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.Mission)
  // optional uint64 mission_id = 1;
  if (this->mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mission_id(), target);
  }

  // repeated double waypoints = 2;
  if (this->waypoints_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _waypoints_cached_byte_size_, target);
  }
  for (int i = 0; i < this->waypoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->waypoints(i), target);
  }

  // optional uint64 usv_reference_time = 3;
  if (this->usv_reference_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->usv_reference_time(), target);
  }

  // repeated double usv_waypoints = 4;
  if (this->usv_waypoints_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _usv_waypoints_cached_byte_size_, target);
  }
  for (int i = 0; i < this->usv_waypoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->usv_waypoints(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.Mission)
  return target;
}

int Mission::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.Mission)
  int total_size = 0;

  // optional uint64 mission_id = 1;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mission_id());
  }

  // optional uint64 usv_reference_time = 3;
  if (this->usv_reference_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->usv_reference_time());
  }

  // repeated double waypoints = 2;
  {
    int data_size = 0;
    data_size = 8 * this->waypoints_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _waypoints_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double usv_waypoints = 4;
  {
    int data_size = 0;
    data_size = 8 * this->usv_waypoints_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _usv_waypoints_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.Mission)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mission* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.Mission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.Mission)
    MergeFrom(*source);
  }
}

void Mission::MergeFrom(const Mission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.Mission)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  waypoints_.MergeFrom(from.waypoints_);
  usv_waypoints_.MergeFrom(from.usv_waypoints_);
  if (from.mission_id() != 0) {
    set_mission_id(from.mission_id());
  }
  if (from.usv_reference_time() != 0) {
    set_usv_reference_time(from.usv_reference_time());
  }
}

void Mission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.Mission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mission::CopyFrom(const Mission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.Mission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission::IsInitialized() const {

  return true;
}

void Mission::Swap(Mission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mission::InternalSwap(Mission* other) {
  std::swap(mission_id_, other->mission_id_);
  waypoints_.UnsafeArenaSwap(&other->waypoints_);
  std::swap(usv_reference_time_, other->usv_reference_time_);
  usv_waypoints_.UnsafeArenaSwap(&other->usv_waypoints_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mission_descriptor_;
  metadata.reflection = Mission_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mission

// optional uint64 mission_id = 1;
void Mission::clear_mission_id() {
  mission_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Mission::mission_id() const {
  // @@protoc_insertion_point(field_get:comms_ariel.Mission.mission_id)
  return mission_id_;
}
 void Mission::set_mission_id(::google::protobuf::uint64 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.Mission.mission_id)
}

// repeated double waypoints = 2;
int Mission::waypoints_size() const {
  return waypoints_.size();
}
void Mission::clear_waypoints() {
  waypoints_.Clear();
}
 double Mission::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:comms_ariel.Mission.waypoints)
  return waypoints_.Get(index);
}
 void Mission::set_waypoints(int index, double value) {
  waypoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:comms_ariel.Mission.waypoints)
}
 void Mission::add_waypoints(double value) {
  waypoints_.Add(value);
  // @@protoc_insertion_point(field_add:comms_ariel.Mission.waypoints)
}
 const ::google::protobuf::RepeatedField< double >&
Mission::waypoints() const {
  // @@protoc_insertion_point(field_list:comms_ariel.Mission.waypoints)
  return waypoints_;
}
 ::google::protobuf::RepeatedField< double >*
Mission::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:comms_ariel.Mission.waypoints)
  return &waypoints_;
}

// optional uint64 usv_reference_time = 3;
void Mission::clear_usv_reference_time() {
  usv_reference_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Mission::usv_reference_time() const {
  // @@protoc_insertion_point(field_get:comms_ariel.Mission.usv_reference_time)
  return usv_reference_time_;
}
 void Mission::set_usv_reference_time(::google::protobuf::uint64 value) {
  
  usv_reference_time_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.Mission.usv_reference_time)
}

// repeated double usv_waypoints = 4;
int Mission::usv_waypoints_size() const {
  return usv_waypoints_.size();
}
void Mission::clear_usv_waypoints() {
  usv_waypoints_.Clear();
}
 double Mission::usv_waypoints(int index) const {
  // @@protoc_insertion_point(field_get:comms_ariel.Mission.usv_waypoints)
  return usv_waypoints_.Get(index);
}
 void Mission::set_usv_waypoints(int index, double value) {
  usv_waypoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:comms_ariel.Mission.usv_waypoints)
}
 void Mission::add_usv_waypoints(double value) {
  usv_waypoints_.Add(value);
  // @@protoc_insertion_point(field_add:comms_ariel.Mission.usv_waypoints)
}
 const ::google::protobuf::RepeatedField< double >&
Mission::usv_waypoints() const {
  // @@protoc_insertion_point(field_list:comms_ariel.Mission.usv_waypoints)
  return usv_waypoints_;
}
 ::google::protobuf::RepeatedField< double >*
Mission::mutable_usv_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:comms_ariel.Mission.usv_waypoints)
  return &usv_waypoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int USVToDroneMessage::kCommonFieldNumber;
const int USVToDroneMessage::kTelemetryFieldNumber;
const int USVToDroneMessage::kMissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

USVToDroneMessage::USVToDroneMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_ariel.USVToDroneMessage)
}

void USVToDroneMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  common_ = const_cast< ::comms_ariel::CommonTelemetry*>(&::comms_ariel::CommonTelemetry::default_instance());
  telemetry_ = const_cast< ::comms_ariel::USVTelemetry*>(&::comms_ariel::USVTelemetry::default_instance());
  mission_ = const_cast< ::comms_ariel::Mission*>(&::comms_ariel::Mission::default_instance());
}

USVToDroneMessage::USVToDroneMessage(const USVToDroneMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comms_ariel.USVToDroneMessage)
}

void USVToDroneMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  common_ = NULL;
  telemetry_ = NULL;
  mission_ = NULL;
}

USVToDroneMessage::~USVToDroneMessage() {
  // @@protoc_insertion_point(destructor:comms_ariel.USVToDroneMessage)
  SharedDtor();
}

void USVToDroneMessage::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
    delete telemetry_;
    delete mission_;
  }
}

void USVToDroneMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* USVToDroneMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return USVToDroneMessage_descriptor_;
}

const USVToDroneMessage& USVToDroneMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  return *default_instance_;
}

USVToDroneMessage* USVToDroneMessage::default_instance_ = NULL;

USVToDroneMessage* USVToDroneMessage::New(::google::protobuf::Arena* arena) const {
  USVToDroneMessage* n = new USVToDroneMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void USVToDroneMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.USVToDroneMessage)
  if (GetArenaNoVirtual() == NULL && common_ != NULL) delete common_;
  common_ = NULL;
  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) delete telemetry_;
  telemetry_ = NULL;
  if (GetArenaNoVirtual() == NULL && mission_ != NULL) delete mission_;
  mission_ = NULL;
}

bool USVToDroneMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_ariel.USVToDroneMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .comms_ariel.CommonTelemetry common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_telemetry;
        break;
      }

      // optional .comms_ariel.USVTelemetry telemetry = 2;
      case 2: {
        if (tag == 18) {
         parse_telemetry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_telemetry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mission;
        break;
      }

      // optional .comms_ariel.Mission mission = 3;
      case 3: {
        if (tag == 26) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_ariel.USVToDroneMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_ariel.USVToDroneMessage)
  return false;
#undef DO_
}

void USVToDroneMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_ariel.USVToDroneMessage)
  // optional .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // optional .comms_ariel.USVTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->telemetry_, output);
  }

  // optional .comms_ariel.Mission mission = 3;
  if (this->has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mission_, output);
  }

  // @@protoc_insertion_point(serialize_end:comms_ariel.USVToDroneMessage)
}

::google::protobuf::uint8* USVToDroneMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.USVToDroneMessage)
  // optional .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  // optional .comms_ariel.USVTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->telemetry_, false, target);
  }

  // optional .comms_ariel.Mission mission = 3;
  if (this->has_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->mission_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.USVToDroneMessage)
  return target;
}

int USVToDroneMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.USVToDroneMessage)
  int total_size = 0;

  // optional .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }

  // optional .comms_ariel.USVTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->telemetry_);
  }

  // optional .comms_ariel.Mission mission = 3;
  if (this->has_mission()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mission_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void USVToDroneMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.USVToDroneMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const USVToDroneMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const USVToDroneMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.USVToDroneMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.USVToDroneMessage)
    MergeFrom(*source);
  }
}

void USVToDroneMessage::MergeFrom(const USVToDroneMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.USVToDroneMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_common()) {
    mutable_common()->::comms_ariel::CommonTelemetry::MergeFrom(from.common());
  }
  if (from.has_telemetry()) {
    mutable_telemetry()->::comms_ariel::USVTelemetry::MergeFrom(from.telemetry());
  }
  if (from.has_mission()) {
    mutable_mission()->::comms_ariel::Mission::MergeFrom(from.mission());
  }
}

void USVToDroneMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.USVToDroneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USVToDroneMessage::CopyFrom(const USVToDroneMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.USVToDroneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USVToDroneMessage::IsInitialized() const {

  return true;
}

void USVToDroneMessage::Swap(USVToDroneMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void USVToDroneMessage::InternalSwap(USVToDroneMessage* other) {
  std::swap(common_, other->common_);
  std::swap(telemetry_, other->telemetry_);
  std::swap(mission_, other->mission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata USVToDroneMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = USVToDroneMessage_descriptor_;
  metadata.reflection = USVToDroneMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// USVToDroneMessage

// optional .comms_ariel.CommonTelemetry common = 1;
bool USVToDroneMessage::has_common() const {
  return !_is_default_instance_ && common_ != NULL;
}
void USVToDroneMessage::clear_common() {
  if (GetArenaNoVirtual() == NULL && common_ != NULL) delete common_;
  common_ = NULL;
}
const ::comms_ariel::CommonTelemetry& USVToDroneMessage::common() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVToDroneMessage.common)
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
::comms_ariel::CommonTelemetry* USVToDroneMessage::mutable_common() {
  
  if (common_ == NULL) {
    common_ = new ::comms_ariel::CommonTelemetry;
  }
  // @@protoc_insertion_point(field_mutable:comms_ariel.USVToDroneMessage.common)
  return common_;
}
::comms_ariel::CommonTelemetry* USVToDroneMessage::release_common() {
  // @@protoc_insertion_point(field_release:comms_ariel.USVToDroneMessage.common)
  
  ::comms_ariel::CommonTelemetry* temp = common_;
  common_ = NULL;
  return temp;
}
void USVToDroneMessage::set_allocated_common(::comms_ariel::CommonTelemetry* common) {
  delete common_;
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.USVToDroneMessage.common)
}

// optional .comms_ariel.USVTelemetry telemetry = 2;
bool USVToDroneMessage::has_telemetry() const {
  return !_is_default_instance_ && telemetry_ != NULL;
}
void USVToDroneMessage::clear_telemetry() {
  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) delete telemetry_;
  telemetry_ = NULL;
}
const ::comms_ariel::USVTelemetry& USVToDroneMessage::telemetry() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVToDroneMessage.telemetry)
  return telemetry_ != NULL ? *telemetry_ : *default_instance_->telemetry_;
}
::comms_ariel::USVTelemetry* USVToDroneMessage::mutable_telemetry() {
  
  if (telemetry_ == NULL) {
    telemetry_ = new ::comms_ariel::USVTelemetry;
  }
  // @@protoc_insertion_point(field_mutable:comms_ariel.USVToDroneMessage.telemetry)
  return telemetry_;
}
::comms_ariel::USVTelemetry* USVToDroneMessage::release_telemetry() {
  // @@protoc_insertion_point(field_release:comms_ariel.USVToDroneMessage.telemetry)
  
  ::comms_ariel::USVTelemetry* temp = telemetry_;
  telemetry_ = NULL;
  return temp;
}
void USVToDroneMessage::set_allocated_telemetry(::comms_ariel::USVTelemetry* telemetry) {
  delete telemetry_;
  telemetry_ = telemetry;
  if (telemetry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.USVToDroneMessage.telemetry)
}

// optional .comms_ariel.Mission mission = 3;
bool USVToDroneMessage::has_mission() const {
  return !_is_default_instance_ && mission_ != NULL;
}
void USVToDroneMessage::clear_mission() {
  if (GetArenaNoVirtual() == NULL && mission_ != NULL) delete mission_;
  mission_ = NULL;
}
const ::comms_ariel::Mission& USVToDroneMessage::mission() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVToDroneMessage.mission)
  return mission_ != NULL ? *mission_ : *default_instance_->mission_;
}
::comms_ariel::Mission* USVToDroneMessage::mutable_mission() {
  
  if (mission_ == NULL) {
    mission_ = new ::comms_ariel::Mission;
  }
  // @@protoc_insertion_point(field_mutable:comms_ariel.USVToDroneMessage.mission)
  return mission_;
}
::comms_ariel::Mission* USVToDroneMessage::release_mission() {
  // @@protoc_insertion_point(field_release:comms_ariel.USVToDroneMessage.mission)
  
  ::comms_ariel::Mission* temp = mission_;
  mission_ = NULL;
  return temp;
}
void USVToDroneMessage::set_allocated_mission(::comms_ariel::Mission* mission) {
  delete mission_;
  mission_ = mission;
  if (mission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.USVToDroneMessage.mission)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DroneToUSVMessage::kCommonFieldNumber;
const int DroneToUSVMessage::kTelemetryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DroneToUSVMessage::DroneToUSVMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comms_ariel.DroneToUSVMessage)
}

void DroneToUSVMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  common_ = const_cast< ::comms_ariel::CommonTelemetry*>(&::comms_ariel::CommonTelemetry::default_instance());
  telemetry_ = const_cast< ::comms_ariel::DroneTelemetry*>(&::comms_ariel::DroneTelemetry::default_instance());
}

DroneToUSVMessage::DroneToUSVMessage(const DroneToUSVMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comms_ariel.DroneToUSVMessage)
}

void DroneToUSVMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  common_ = NULL;
  telemetry_ = NULL;
}

DroneToUSVMessage::~DroneToUSVMessage() {
  // @@protoc_insertion_point(destructor:comms_ariel.DroneToUSVMessage)
  SharedDtor();
}

void DroneToUSVMessage::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
    delete telemetry_;
  }
}

void DroneToUSVMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DroneToUSVMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DroneToUSVMessage_descriptor_;
}

const DroneToUSVMessage& DroneToUSVMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  return *default_instance_;
}

DroneToUSVMessage* DroneToUSVMessage::default_instance_ = NULL;

DroneToUSVMessage* DroneToUSVMessage::New(::google::protobuf::Arena* arena) const {
  DroneToUSVMessage* n = new DroneToUSVMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DroneToUSVMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.DroneToUSVMessage)
  if (GetArenaNoVirtual() == NULL && common_ != NULL) delete common_;
  common_ = NULL;
  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) delete telemetry_;
  telemetry_ = NULL;
}

bool DroneToUSVMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comms_ariel.DroneToUSVMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .comms_ariel.CommonTelemetry common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_telemetry;
        break;
      }

      // optional .comms_ariel.DroneTelemetry telemetry = 2;
      case 2: {
        if (tag == 18) {
         parse_telemetry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_telemetry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comms_ariel.DroneToUSVMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comms_ariel.DroneToUSVMessage)
  return false;
#undef DO_
}

void DroneToUSVMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comms_ariel.DroneToUSVMessage)
  // optional .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // optional .comms_ariel.DroneTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->telemetry_, output);
  }

  // @@protoc_insertion_point(serialize_end:comms_ariel.DroneToUSVMessage)
}

::google::protobuf::uint8* DroneToUSVMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.DroneToUSVMessage)
  // optional .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, false, target);
  }

  // optional .comms_ariel.DroneTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->telemetry_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.DroneToUSVMessage)
  return target;
}

int DroneToUSVMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.DroneToUSVMessage)
  int total_size = 0;

  // optional .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }

  // optional .comms_ariel.DroneTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->telemetry_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DroneToUSVMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.DroneToUSVMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DroneToUSVMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DroneToUSVMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.DroneToUSVMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.DroneToUSVMessage)
    MergeFrom(*source);
  }
}

void DroneToUSVMessage::MergeFrom(const DroneToUSVMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.DroneToUSVMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_common()) {
    mutable_common()->::comms_ariel::CommonTelemetry::MergeFrom(from.common());
  }
  if (from.has_telemetry()) {
    mutable_telemetry()->::comms_ariel::DroneTelemetry::MergeFrom(from.telemetry());
  }
}

void DroneToUSVMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.DroneToUSVMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneToUSVMessage::CopyFrom(const DroneToUSVMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.DroneToUSVMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneToUSVMessage::IsInitialized() const {

  return true;
}

void DroneToUSVMessage::Swap(DroneToUSVMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DroneToUSVMessage::InternalSwap(DroneToUSVMessage* other) {
  std::swap(common_, other->common_);
  std::swap(telemetry_, other->telemetry_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DroneToUSVMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DroneToUSVMessage_descriptor_;
  metadata.reflection = DroneToUSVMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DroneToUSVMessage

// optional .comms_ariel.CommonTelemetry common = 1;
bool DroneToUSVMessage::has_common() const {
  return !_is_default_instance_ && common_ != NULL;
}
void DroneToUSVMessage::clear_common() {
  if (GetArenaNoVirtual() == NULL && common_ != NULL) delete common_;
  common_ = NULL;
}
const ::comms_ariel::CommonTelemetry& DroneToUSVMessage::common() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneToUSVMessage.common)
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
::comms_ariel::CommonTelemetry* DroneToUSVMessage::mutable_common() {
  
  if (common_ == NULL) {
    common_ = new ::comms_ariel::CommonTelemetry;
  }
  // @@protoc_insertion_point(field_mutable:comms_ariel.DroneToUSVMessage.common)
  return common_;
}
::comms_ariel::CommonTelemetry* DroneToUSVMessage::release_common() {
  // @@protoc_insertion_point(field_release:comms_ariel.DroneToUSVMessage.common)
  
  ::comms_ariel::CommonTelemetry* temp = common_;
  common_ = NULL;
  return temp;
}
void DroneToUSVMessage::set_allocated_common(::comms_ariel::CommonTelemetry* common) {
  delete common_;
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.DroneToUSVMessage.common)
}

// optional .comms_ariel.DroneTelemetry telemetry = 2;
bool DroneToUSVMessage::has_telemetry() const {
  return !_is_default_instance_ && telemetry_ != NULL;
}
void DroneToUSVMessage::clear_telemetry() {
  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) delete telemetry_;
  telemetry_ = NULL;
}
const ::comms_ariel::DroneTelemetry& DroneToUSVMessage::telemetry() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneToUSVMessage.telemetry)
  return telemetry_ != NULL ? *telemetry_ : *default_instance_->telemetry_;
}
::comms_ariel::DroneTelemetry* DroneToUSVMessage::mutable_telemetry() {
  
  if (telemetry_ == NULL) {
    telemetry_ = new ::comms_ariel::DroneTelemetry;
  }
  // @@protoc_insertion_point(field_mutable:comms_ariel.DroneToUSVMessage.telemetry)
  return telemetry_;
}
::comms_ariel::DroneTelemetry* DroneToUSVMessage::release_telemetry() {
  // @@protoc_insertion_point(field_release:comms_ariel.DroneToUSVMessage.telemetry)
  
  ::comms_ariel::DroneTelemetry* temp = telemetry_;
  telemetry_ = NULL;
  return temp;
}
void DroneToUSVMessage::set_allocated_telemetry(::comms_ariel::DroneTelemetry* telemetry) {
  delete telemetry_;
  telemetry_ = telemetry;
  if (telemetry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.DroneToUSVMessage.telemetry)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comms_ariel

// @@protoc_insertion_point(global_scope)

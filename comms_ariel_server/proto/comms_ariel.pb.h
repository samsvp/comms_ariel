// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/comms_ariel/proto/comms_ariel.proto

#ifndef PROTOBUF_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto__INCLUDED
#define PROTOBUF_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace comms_ariel {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
void protobuf_AssignDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
void protobuf_ShutdownFile_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();

class CommonTelemetry;
class DroneTelemetry;
class DroneToUSVMessage;
class Mission;
class USVTelemetry;
class USVToDroneMessage;

enum USVTelemetry_States {
  USVTelemetry_States_TRANSIT = 0,
  USVTelemetry_States_TAKEOFF_OK = 1,
  USVTelemetry_States_LANDING_OK = 2,
  USVTelemetry_States_USVTelemetry_States_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  USVTelemetry_States_USVTelemetry_States_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool USVTelemetry_States_IsValid(int value);
const USVTelemetry_States USVTelemetry_States_States_MIN = USVTelemetry_States_TRANSIT;
const USVTelemetry_States USVTelemetry_States_States_MAX = USVTelemetry_States_LANDING_OK;
const int USVTelemetry_States_States_ARRAYSIZE = USVTelemetry_States_States_MAX + 1;

const ::google::protobuf::EnumDescriptor* USVTelemetry_States_descriptor();
inline const ::std::string& USVTelemetry_States_Name(USVTelemetry_States value) {
  return ::google::protobuf::internal::NameOfEnum(
    USVTelemetry_States_descriptor(), value);
}
inline bool USVTelemetry_States_Parse(
    const ::std::string& name, USVTelemetry_States* value) {
  return ::google::protobuf::internal::ParseNamedEnum<USVTelemetry_States>(
    USVTelemetry_States_descriptor(), name, value);
}
enum DroneTelemetry_States {
  DroneTelemetry_States_WAITING_LANDING = 0,
  DroneTelemetry_States_DroneTelemetry_States_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DroneTelemetry_States_DroneTelemetry_States_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DroneTelemetry_States_IsValid(int value);
const DroneTelemetry_States DroneTelemetry_States_States_MIN = DroneTelemetry_States_WAITING_LANDING;
const DroneTelemetry_States DroneTelemetry_States_States_MAX = DroneTelemetry_States_WAITING_LANDING;
const int DroneTelemetry_States_States_ARRAYSIZE = DroneTelemetry_States_States_MAX + 1;

const ::google::protobuf::EnumDescriptor* DroneTelemetry_States_descriptor();
inline const ::std::string& DroneTelemetry_States_Name(DroneTelemetry_States value) {
  return ::google::protobuf::internal::NameOfEnum(
    DroneTelemetry_States_descriptor(), value);
}
inline bool DroneTelemetry_States_Parse(
    const ::std::string& name, DroneTelemetry_States* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DroneTelemetry_States>(
    DroneTelemetry_States_descriptor(), name, value);
}
// ===================================================================

class CommonTelemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:comms_ariel.CommonTelemetry) */ {
 public:
  CommonTelemetry();
  virtual ~CommonTelemetry();

  CommonTelemetry(const CommonTelemetry& from);

  inline CommonTelemetry& operator=(const CommonTelemetry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonTelemetry& default_instance();

  void Swap(CommonTelemetry* other);

  // implements Message ----------------------------------------------

  inline CommonTelemetry* New() const { return New(NULL); }

  CommonTelemetry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonTelemetry& from);
  void MergeFrom(const CommonTelemetry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommonTelemetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 time_us = 1;
  void clear_time_us();
  static const int kTimeUsFieldNumber = 1;
  ::google::protobuf::uint64 time_us() const;
  void set_time_us(::google::protobuf::uint64 value);

  // optional uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:comms_ariel.CommonTelemetry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 time_us_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  friend void protobuf_AssignDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  friend void protobuf_ShutdownFile_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();

  void InitAsDefaultInstance();
  static CommonTelemetry* default_instance_;
};
// -------------------------------------------------------------------

class USVTelemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:comms_ariel.USVTelemetry) */ {
 public:
  USVTelemetry();
  virtual ~USVTelemetry();

  USVTelemetry(const USVTelemetry& from);

  inline USVTelemetry& operator=(const USVTelemetry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const USVTelemetry& default_instance();

  void Swap(USVTelemetry* other);

  // implements Message ----------------------------------------------

  inline USVTelemetry* New() const { return New(NULL); }

  USVTelemetry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const USVTelemetry& from);
  void MergeFrom(const USVTelemetry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(USVTelemetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef USVTelemetry_States States;
  static const States TRANSIT =
    USVTelemetry_States_TRANSIT;
  static const States TAKEOFF_OK =
    USVTelemetry_States_TAKEOFF_OK;
  static const States LANDING_OK =
    USVTelemetry_States_LANDING_OK;
  static inline bool States_IsValid(int value) {
    return USVTelemetry_States_IsValid(value);
  }
  static const States States_MIN =
    USVTelemetry_States_States_MIN;
  static const States States_MAX =
    USVTelemetry_States_States_MAX;
  static const int States_ARRAYSIZE =
    USVTelemetry_States_States_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  States_descriptor() {
    return USVTelemetry_States_descriptor();
  }
  static inline const ::std::string& States_Name(States value) {
    return USVTelemetry_States_Name(value);
  }
  static inline bool States_Parse(const ::std::string& name,
      States* value) {
    return USVTelemetry_States_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double latitude = 2;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 3;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  double longitude() const;
  void set_longitude(double value);

  // repeated double orientation = 4;
  int orientation_size() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 4;
  double orientation(int index) const;
  void set_orientation(int index, double value);
  void add_orientation(double value);
  const ::google::protobuf::RepeatedField< double >&
      orientation() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_orientation();

  // optional float velocity_n = 5;
  void clear_velocity_n();
  static const int kVelocityNFieldNumber = 5;
  float velocity_n() const;
  void set_velocity_n(float value);

  // optional float velocity_w = 6;
  void clear_velocity_w();
  static const int kVelocityWFieldNumber = 6;
  float velocity_w() const;
  void set_velocity_w(float value);

  // optional .comms_ariel.USVTelemetry.States state = 8;
  void clear_state();
  static const int kStateFieldNumber = 8;
  ::comms_ariel::USVTelemetry_States state() const;
  void set_state(::comms_ariel::USVTelemetry_States value);

  // @@protoc_insertion_point(class_scope:comms_ariel.USVTelemetry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double latitude_;
  double longitude_;
  ::google::protobuf::RepeatedField< double > orientation_;
  mutable int _orientation_cached_byte_size_;
  float velocity_n_;
  float velocity_w_;
  int state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  friend void protobuf_AssignDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  friend void protobuf_ShutdownFile_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();

  void InitAsDefaultInstance();
  static USVTelemetry* default_instance_;
};
// -------------------------------------------------------------------

class DroneTelemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:comms_ariel.DroneTelemetry) */ {
 public:
  DroneTelemetry();
  virtual ~DroneTelemetry();

  DroneTelemetry(const DroneTelemetry& from);

  inline DroneTelemetry& operator=(const DroneTelemetry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DroneTelemetry& default_instance();

  void Swap(DroneTelemetry* other);

  // implements Message ----------------------------------------------

  inline DroneTelemetry* New() const { return New(NULL); }

  DroneTelemetry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DroneTelemetry& from);
  void MergeFrom(const DroneTelemetry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DroneTelemetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DroneTelemetry_States States;
  static const States WAITING_LANDING =
    DroneTelemetry_States_WAITING_LANDING;
  static inline bool States_IsValid(int value) {
    return DroneTelemetry_States_IsValid(value);
  }
  static const States States_MIN =
    DroneTelemetry_States_States_MIN;
  static const States States_MAX =
    DroneTelemetry_States_States_MAX;
  static const int States_ARRAYSIZE =
    DroneTelemetry_States_States_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  States_descriptor() {
    return DroneTelemetry_States_descriptor();
  }
  static inline const ::std::string& States_Name(States value) {
    return DroneTelemetry_States_Name(value);
  }
  static inline bool States_Parse(const ::std::string& name,
      States* value) {
    return DroneTelemetry_States_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 loaded_mission_id = 1;
  void clear_loaded_mission_id();
  static const int kLoadedMissionIdFieldNumber = 1;
  ::google::protobuf::uint64 loaded_mission_id() const;
  void set_loaded_mission_id(::google::protobuf::uint64 value);

  // optional double latitude = 2;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 3;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  double longitude() const;
  void set_longitude(double value);

  // optional float altitude = 4;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 4;
  float altitude() const;
  void set_altitude(float value);

  // optional .comms_ariel.DroneTelemetry.States state = 8;
  void clear_state();
  static const int kStateFieldNumber = 8;
  ::comms_ariel::DroneTelemetry_States state() const;
  void set_state(::comms_ariel::DroneTelemetry_States value);

  // @@protoc_insertion_point(class_scope:comms_ariel.DroneTelemetry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 loaded_mission_id_;
  double latitude_;
  double longitude_;
  float altitude_;
  int state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  friend void protobuf_AssignDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  friend void protobuf_ShutdownFile_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();

  void InitAsDefaultInstance();
  static DroneTelemetry* default_instance_;
};
// -------------------------------------------------------------------

class Mission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:comms_ariel.Mission) */ {
 public:
  Mission();
  virtual ~Mission();

  Mission(const Mission& from);

  inline Mission& operator=(const Mission& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission& default_instance();

  void Swap(Mission* other);

  // implements Message ----------------------------------------------

  inline Mission* New() const { return New(NULL); }

  Mission* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mission& from);
  void MergeFrom(const Mission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 mission_id = 1;
  void clear_mission_id();
  static const int kMissionIdFieldNumber = 1;
  ::google::protobuf::uint64 mission_id() const;
  void set_mission_id(::google::protobuf::uint64 value);

  // repeated double waypoints = 2;
  int waypoints_size() const;
  void clear_waypoints();
  static const int kWaypointsFieldNumber = 2;
  double waypoints(int index) const;
  void set_waypoints(int index, double value);
  void add_waypoints(double value);
  const ::google::protobuf::RepeatedField< double >&
      waypoints() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_waypoints();

  // optional uint64 usv_reference_time = 3;
  void clear_usv_reference_time();
  static const int kUsvReferenceTimeFieldNumber = 3;
  ::google::protobuf::uint64 usv_reference_time() const;
  void set_usv_reference_time(::google::protobuf::uint64 value);

  // repeated double usv_waypoints = 4;
  int usv_waypoints_size() const;
  void clear_usv_waypoints();
  static const int kUsvWaypointsFieldNumber = 4;
  double usv_waypoints(int index) const;
  void set_usv_waypoints(int index, double value);
  void add_usv_waypoints(double value);
  const ::google::protobuf::RepeatedField< double >&
      usv_waypoints() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_usv_waypoints();

  // @@protoc_insertion_point(class_scope:comms_ariel.Mission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 mission_id_;
  ::google::protobuf::RepeatedField< double > waypoints_;
  mutable int _waypoints_cached_byte_size_;
  ::google::protobuf::uint64 usv_reference_time_;
  ::google::protobuf::RepeatedField< double > usv_waypoints_;
  mutable int _usv_waypoints_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  friend void protobuf_AssignDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  friend void protobuf_ShutdownFile_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();

  void InitAsDefaultInstance();
  static Mission* default_instance_;
};
// -------------------------------------------------------------------

class USVToDroneMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:comms_ariel.USVToDroneMessage) */ {
 public:
  USVToDroneMessage();
  virtual ~USVToDroneMessage();

  USVToDroneMessage(const USVToDroneMessage& from);

  inline USVToDroneMessage& operator=(const USVToDroneMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const USVToDroneMessage& default_instance();

  void Swap(USVToDroneMessage* other);

  // implements Message ----------------------------------------------

  inline USVToDroneMessage* New() const { return New(NULL); }

  USVToDroneMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const USVToDroneMessage& from);
  void MergeFrom(const USVToDroneMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(USVToDroneMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .comms_ariel.CommonTelemetry common = 1;
  bool has_common() const;
  void clear_common();
  static const int kCommonFieldNumber = 1;
  const ::comms_ariel::CommonTelemetry& common() const;
  ::comms_ariel::CommonTelemetry* mutable_common();
  ::comms_ariel::CommonTelemetry* release_common();
  void set_allocated_common(::comms_ariel::CommonTelemetry* common);

  // optional .comms_ariel.USVTelemetry telemetry = 2;
  bool has_telemetry() const;
  void clear_telemetry();
  static const int kTelemetryFieldNumber = 2;
  const ::comms_ariel::USVTelemetry& telemetry() const;
  ::comms_ariel::USVTelemetry* mutable_telemetry();
  ::comms_ariel::USVTelemetry* release_telemetry();
  void set_allocated_telemetry(::comms_ariel::USVTelemetry* telemetry);

  // optional .comms_ariel.Mission mission = 3;
  bool has_mission() const;
  void clear_mission();
  static const int kMissionFieldNumber = 3;
  const ::comms_ariel::Mission& mission() const;
  ::comms_ariel::Mission* mutable_mission();
  ::comms_ariel::Mission* release_mission();
  void set_allocated_mission(::comms_ariel::Mission* mission);

  // @@protoc_insertion_point(class_scope:comms_ariel.USVToDroneMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::comms_ariel::CommonTelemetry* common_;
  ::comms_ariel::USVTelemetry* telemetry_;
  ::comms_ariel::Mission* mission_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  friend void protobuf_AssignDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  friend void protobuf_ShutdownFile_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();

  void InitAsDefaultInstance();
  static USVToDroneMessage* default_instance_;
};
// -------------------------------------------------------------------

class DroneToUSVMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:comms_ariel.DroneToUSVMessage) */ {
 public:
  DroneToUSVMessage();
  virtual ~DroneToUSVMessage();

  DroneToUSVMessage(const DroneToUSVMessage& from);

  inline DroneToUSVMessage& operator=(const DroneToUSVMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DroneToUSVMessage& default_instance();

  void Swap(DroneToUSVMessage* other);

  // implements Message ----------------------------------------------

  inline DroneToUSVMessage* New() const { return New(NULL); }

  DroneToUSVMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DroneToUSVMessage& from);
  void MergeFrom(const DroneToUSVMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DroneToUSVMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .comms_ariel.CommonTelemetry common = 1;
  bool has_common() const;
  void clear_common();
  static const int kCommonFieldNumber = 1;
  const ::comms_ariel::CommonTelemetry& common() const;
  ::comms_ariel::CommonTelemetry* mutable_common();
  ::comms_ariel::CommonTelemetry* release_common();
  void set_allocated_common(::comms_ariel::CommonTelemetry* common);

  // optional .comms_ariel.DroneTelemetry telemetry = 2;
  bool has_telemetry() const;
  void clear_telemetry();
  static const int kTelemetryFieldNumber = 2;
  const ::comms_ariel::DroneTelemetry& telemetry() const;
  ::comms_ariel::DroneTelemetry* mutable_telemetry();
  ::comms_ariel::DroneTelemetry* release_telemetry();
  void set_allocated_telemetry(::comms_ariel::DroneTelemetry* telemetry);

  // @@protoc_insertion_point(class_scope:comms_ariel.DroneToUSVMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::comms_ariel::CommonTelemetry* common_;
  ::comms_ariel::DroneTelemetry* telemetry_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  friend void protobuf_AssignDesc_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();
  friend void protobuf_ShutdownFile_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto();

  void InitAsDefaultInstance();
  static DroneToUSVMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonTelemetry

// optional uint64 time_us = 1;
inline void CommonTelemetry::clear_time_us() {
  time_us_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CommonTelemetry::time_us() const {
  // @@protoc_insertion_point(field_get:comms_ariel.CommonTelemetry.time_us)
  return time_us_;
}
inline void CommonTelemetry::set_time_us(::google::protobuf::uint64 value) {
  
  time_us_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.CommonTelemetry.time_us)
}

// optional uint32 id = 2;
inline void CommonTelemetry::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 CommonTelemetry::id() const {
  // @@protoc_insertion_point(field_get:comms_ariel.CommonTelemetry.id)
  return id_;
}
inline void CommonTelemetry::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.CommonTelemetry.id)
}

// -------------------------------------------------------------------

// USVTelemetry

// optional double latitude = 2;
inline void USVTelemetry::clear_latitude() {
  latitude_ = 0;
}
inline double USVTelemetry::latitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.latitude)
  return latitude_;
}
inline void USVTelemetry::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.latitude)
}

// optional double longitude = 3;
inline void USVTelemetry::clear_longitude() {
  longitude_ = 0;
}
inline double USVTelemetry::longitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.longitude)
  return longitude_;
}
inline void USVTelemetry::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.longitude)
}

// repeated double orientation = 4;
inline int USVTelemetry::orientation_size() const {
  return orientation_.size();
}
inline void USVTelemetry::clear_orientation() {
  orientation_.Clear();
}
inline double USVTelemetry::orientation(int index) const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.orientation)
  return orientation_.Get(index);
}
inline void USVTelemetry::set_orientation(int index, double value) {
  orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.orientation)
}
inline void USVTelemetry::add_orientation(double value) {
  orientation_.Add(value);
  // @@protoc_insertion_point(field_add:comms_ariel.USVTelemetry.orientation)
}
inline const ::google::protobuf::RepeatedField< double >&
USVTelemetry::orientation() const {
  // @@protoc_insertion_point(field_list:comms_ariel.USVTelemetry.orientation)
  return orientation_;
}
inline ::google::protobuf::RepeatedField< double >*
USVTelemetry::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable_list:comms_ariel.USVTelemetry.orientation)
  return &orientation_;
}

// optional float velocity_n = 5;
inline void USVTelemetry::clear_velocity_n() {
  velocity_n_ = 0;
}
inline float USVTelemetry::velocity_n() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.velocity_n)
  return velocity_n_;
}
inline void USVTelemetry::set_velocity_n(float value) {
  
  velocity_n_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.velocity_n)
}

// optional float velocity_w = 6;
inline void USVTelemetry::clear_velocity_w() {
  velocity_w_ = 0;
}
inline float USVTelemetry::velocity_w() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.velocity_w)
  return velocity_w_;
}
inline void USVTelemetry::set_velocity_w(float value) {
  
  velocity_w_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.velocity_w)
}

// optional .comms_ariel.USVTelemetry.States state = 8;
inline void USVTelemetry::clear_state() {
  state_ = 0;
}
inline ::comms_ariel::USVTelemetry_States USVTelemetry::state() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.state)
  return static_cast< ::comms_ariel::USVTelemetry_States >(state_);
}
inline void USVTelemetry::set_state(::comms_ariel::USVTelemetry_States value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.state)
}

// -------------------------------------------------------------------

// DroneTelemetry

// optional uint64 loaded_mission_id = 1;
inline void DroneTelemetry::clear_loaded_mission_id() {
  loaded_mission_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DroneTelemetry::loaded_mission_id() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.loaded_mission_id)
  return loaded_mission_id_;
}
inline void DroneTelemetry::set_loaded_mission_id(::google::protobuf::uint64 value) {
  
  loaded_mission_id_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.loaded_mission_id)
}

// optional double latitude = 2;
inline void DroneTelemetry::clear_latitude() {
  latitude_ = 0;
}
inline double DroneTelemetry::latitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.latitude)
  return latitude_;
}
inline void DroneTelemetry::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.latitude)
}

// optional double longitude = 3;
inline void DroneTelemetry::clear_longitude() {
  longitude_ = 0;
}
inline double DroneTelemetry::longitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.longitude)
  return longitude_;
}
inline void DroneTelemetry::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.longitude)
}

// optional float altitude = 4;
inline void DroneTelemetry::clear_altitude() {
  altitude_ = 0;
}
inline float DroneTelemetry::altitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.altitude)
  return altitude_;
}
inline void DroneTelemetry::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.altitude)
}

// optional .comms_ariel.DroneTelemetry.States state = 8;
inline void DroneTelemetry::clear_state() {
  state_ = 0;
}
inline ::comms_ariel::DroneTelemetry_States DroneTelemetry::state() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.state)
  return static_cast< ::comms_ariel::DroneTelemetry_States >(state_);
}
inline void DroneTelemetry::set_state(::comms_ariel::DroneTelemetry_States value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.state)
}

// -------------------------------------------------------------------

// Mission

// optional uint64 mission_id = 1;
inline void Mission::clear_mission_id() {
  mission_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Mission::mission_id() const {
  // @@protoc_insertion_point(field_get:comms_ariel.Mission.mission_id)
  return mission_id_;
}
inline void Mission::set_mission_id(::google::protobuf::uint64 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.Mission.mission_id)
}

// repeated double waypoints = 2;
inline int Mission::waypoints_size() const {
  return waypoints_.size();
}
inline void Mission::clear_waypoints() {
  waypoints_.Clear();
}
inline double Mission::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:comms_ariel.Mission.waypoints)
  return waypoints_.Get(index);
}
inline void Mission::set_waypoints(int index, double value) {
  waypoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:comms_ariel.Mission.waypoints)
}
inline void Mission::add_waypoints(double value) {
  waypoints_.Add(value);
  // @@protoc_insertion_point(field_add:comms_ariel.Mission.waypoints)
}
inline const ::google::protobuf::RepeatedField< double >&
Mission::waypoints() const {
  // @@protoc_insertion_point(field_list:comms_ariel.Mission.waypoints)
  return waypoints_;
}
inline ::google::protobuf::RepeatedField< double >*
Mission::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:comms_ariel.Mission.waypoints)
  return &waypoints_;
}

// optional uint64 usv_reference_time = 3;
inline void Mission::clear_usv_reference_time() {
  usv_reference_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Mission::usv_reference_time() const {
  // @@protoc_insertion_point(field_get:comms_ariel.Mission.usv_reference_time)
  return usv_reference_time_;
}
inline void Mission::set_usv_reference_time(::google::protobuf::uint64 value) {
  
  usv_reference_time_ = value;
  // @@protoc_insertion_point(field_set:comms_ariel.Mission.usv_reference_time)
}

// repeated double usv_waypoints = 4;
inline int Mission::usv_waypoints_size() const {
  return usv_waypoints_.size();
}
inline void Mission::clear_usv_waypoints() {
  usv_waypoints_.Clear();
}
inline double Mission::usv_waypoints(int index) const {
  // @@protoc_insertion_point(field_get:comms_ariel.Mission.usv_waypoints)
  return usv_waypoints_.Get(index);
}
inline void Mission::set_usv_waypoints(int index, double value) {
  usv_waypoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:comms_ariel.Mission.usv_waypoints)
}
inline void Mission::add_usv_waypoints(double value) {
  usv_waypoints_.Add(value);
  // @@protoc_insertion_point(field_add:comms_ariel.Mission.usv_waypoints)
}
inline const ::google::protobuf::RepeatedField< double >&
Mission::usv_waypoints() const {
  // @@protoc_insertion_point(field_list:comms_ariel.Mission.usv_waypoints)
  return usv_waypoints_;
}
inline ::google::protobuf::RepeatedField< double >*
Mission::mutable_usv_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:comms_ariel.Mission.usv_waypoints)
  return &usv_waypoints_;
}

// -------------------------------------------------------------------

// USVToDroneMessage

// optional .comms_ariel.CommonTelemetry common = 1;
inline bool USVToDroneMessage::has_common() const {
  return !_is_default_instance_ && common_ != NULL;
}
inline void USVToDroneMessage::clear_common() {
  if (GetArenaNoVirtual() == NULL && common_ != NULL) delete common_;
  common_ = NULL;
}
inline const ::comms_ariel::CommonTelemetry& USVToDroneMessage::common() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVToDroneMessage.common)
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::comms_ariel::CommonTelemetry* USVToDroneMessage::mutable_common() {
  
  if (common_ == NULL) {
    common_ = new ::comms_ariel::CommonTelemetry;
  }
  // @@protoc_insertion_point(field_mutable:comms_ariel.USVToDroneMessage.common)
  return common_;
}
inline ::comms_ariel::CommonTelemetry* USVToDroneMessage::release_common() {
  // @@protoc_insertion_point(field_release:comms_ariel.USVToDroneMessage.common)
  
  ::comms_ariel::CommonTelemetry* temp = common_;
  common_ = NULL;
  return temp;
}
inline void USVToDroneMessage::set_allocated_common(::comms_ariel::CommonTelemetry* common) {
  delete common_;
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.USVToDroneMessage.common)
}

// optional .comms_ariel.USVTelemetry telemetry = 2;
inline bool USVToDroneMessage::has_telemetry() const {
  return !_is_default_instance_ && telemetry_ != NULL;
}
inline void USVToDroneMessage::clear_telemetry() {
  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) delete telemetry_;
  telemetry_ = NULL;
}
inline const ::comms_ariel::USVTelemetry& USVToDroneMessage::telemetry() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVToDroneMessage.telemetry)
  return telemetry_ != NULL ? *telemetry_ : *default_instance_->telemetry_;
}
inline ::comms_ariel::USVTelemetry* USVToDroneMessage::mutable_telemetry() {
  
  if (telemetry_ == NULL) {
    telemetry_ = new ::comms_ariel::USVTelemetry;
  }
  // @@protoc_insertion_point(field_mutable:comms_ariel.USVToDroneMessage.telemetry)
  return telemetry_;
}
inline ::comms_ariel::USVTelemetry* USVToDroneMessage::release_telemetry() {
  // @@protoc_insertion_point(field_release:comms_ariel.USVToDroneMessage.telemetry)
  
  ::comms_ariel::USVTelemetry* temp = telemetry_;
  telemetry_ = NULL;
  return temp;
}
inline void USVToDroneMessage::set_allocated_telemetry(::comms_ariel::USVTelemetry* telemetry) {
  delete telemetry_;
  telemetry_ = telemetry;
  if (telemetry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.USVToDroneMessage.telemetry)
}

// optional .comms_ariel.Mission mission = 3;
inline bool USVToDroneMessage::has_mission() const {
  return !_is_default_instance_ && mission_ != NULL;
}
inline void USVToDroneMessage::clear_mission() {
  if (GetArenaNoVirtual() == NULL && mission_ != NULL) delete mission_;
  mission_ = NULL;
}
inline const ::comms_ariel::Mission& USVToDroneMessage::mission() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVToDroneMessage.mission)
  return mission_ != NULL ? *mission_ : *default_instance_->mission_;
}
inline ::comms_ariel::Mission* USVToDroneMessage::mutable_mission() {
  
  if (mission_ == NULL) {
    mission_ = new ::comms_ariel::Mission;
  }
  // @@protoc_insertion_point(field_mutable:comms_ariel.USVToDroneMessage.mission)
  return mission_;
}
inline ::comms_ariel::Mission* USVToDroneMessage::release_mission() {
  // @@protoc_insertion_point(field_release:comms_ariel.USVToDroneMessage.mission)
  
  ::comms_ariel::Mission* temp = mission_;
  mission_ = NULL;
  return temp;
}
inline void USVToDroneMessage::set_allocated_mission(::comms_ariel::Mission* mission) {
  delete mission_;
  mission_ = mission;
  if (mission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.USVToDroneMessage.mission)
}

// -------------------------------------------------------------------

// DroneToUSVMessage

// optional .comms_ariel.CommonTelemetry common = 1;
inline bool DroneToUSVMessage::has_common() const {
  return !_is_default_instance_ && common_ != NULL;
}
inline void DroneToUSVMessage::clear_common() {
  if (GetArenaNoVirtual() == NULL && common_ != NULL) delete common_;
  common_ = NULL;
}
inline const ::comms_ariel::CommonTelemetry& DroneToUSVMessage::common() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneToUSVMessage.common)
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::comms_ariel::CommonTelemetry* DroneToUSVMessage::mutable_common() {
  
  if (common_ == NULL) {
    common_ = new ::comms_ariel::CommonTelemetry;
  }
  // @@protoc_insertion_point(field_mutable:comms_ariel.DroneToUSVMessage.common)
  return common_;
}
inline ::comms_ariel::CommonTelemetry* DroneToUSVMessage::release_common() {
  // @@protoc_insertion_point(field_release:comms_ariel.DroneToUSVMessage.common)
  
  ::comms_ariel::CommonTelemetry* temp = common_;
  common_ = NULL;
  return temp;
}
inline void DroneToUSVMessage::set_allocated_common(::comms_ariel::CommonTelemetry* common) {
  delete common_;
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.DroneToUSVMessage.common)
}

// optional .comms_ariel.DroneTelemetry telemetry = 2;
inline bool DroneToUSVMessage::has_telemetry() const {
  return !_is_default_instance_ && telemetry_ != NULL;
}
inline void DroneToUSVMessage::clear_telemetry() {
  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) delete telemetry_;
  telemetry_ = NULL;
}
inline const ::comms_ariel::DroneTelemetry& DroneToUSVMessage::telemetry() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneToUSVMessage.telemetry)
  return telemetry_ != NULL ? *telemetry_ : *default_instance_->telemetry_;
}
inline ::comms_ariel::DroneTelemetry* DroneToUSVMessage::mutable_telemetry() {
  
  if (telemetry_ == NULL) {
    telemetry_ = new ::comms_ariel::DroneTelemetry;
  }
  // @@protoc_insertion_point(field_mutable:comms_ariel.DroneToUSVMessage.telemetry)
  return telemetry_;
}
inline ::comms_ariel::DroneTelemetry* DroneToUSVMessage::release_telemetry() {
  // @@protoc_insertion_point(field_release:comms_ariel.DroneToUSVMessage.telemetry)
  
  ::comms_ariel::DroneTelemetry* temp = telemetry_;
  telemetry_ = NULL;
  return temp;
}
inline void DroneToUSVMessage::set_allocated_telemetry(::comms_ariel::DroneTelemetry* telemetry) {
  delete telemetry_;
  telemetry_ = telemetry;
  if (telemetry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.DroneToUSVMessage.telemetry)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace comms_ariel

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::comms_ariel::USVTelemetry_States> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comms_ariel::USVTelemetry_States>() {
  return ::comms_ariel::USVTelemetry_States_descriptor();
}
template <> struct is_proto_enum< ::comms_ariel::DroneTelemetry_States> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comms_ariel::DroneTelemetry_States>() {
  return ::comms_ariel::DroneTelemetry_States_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_src_2fcomms_5fariel_2fproto_2fcomms_5fariel_2eproto__INCLUDED
